resources:
  jobs:
    basket_deviations_hourly:
      name: basket_deviations_hourly

      tags:
        tool: "Preselector"
        purpose: "transformation"
        env: ${bundle.target}
        managed_by: "manually" 
        user: "dbt developers"

      permissions:
        - group_name: data-scientists
          level: CAN_MANAGE_RUN
        - group_name: data-engineers
          level: CAN_MANAGE_RUN

      timeout_seconds: 4500 #Timeout after 75 mins
      edit_mode: EDITABLE

      schedule:
       #Run every day every hour between 6:30am and 2:30am. (6:30, 7:30, ..., 23:30, 00:30, 1:30, 2:30) and also at 00:00 to ensure a successful run at around midnight.
        quartz_cron_expression: 0 30 6-2/1,0 ? * * *
        timezone_id: Europe/Oslo

      tasks:

        - task_key: check-if-main-data-model-job-runs
          run_job_task:
              job_id: ${var.running_job_check_job_id}
              job_parameters:
                  job_name: "main-data-model-job"
                  environment: ${bundle.target}

        - task_key: bronze_psl_full
          notebook_task:
            notebook_path: ../ingest/full_ingest/bronze_psl_full.py
          depends_on:
            - task_key: check-if-main-data-model-job-runs

        - task_key: bronze_cms_billing_agreement_basket_deviations_and_products
          notebook_task:
            notebook_path: ../ingest/incremental_ingest/bronze_cms_billing_agreement_basket_deviations_&_products.py
          depends_on:
            - task_key: check-if-main-data-model-job-runs

        - task_key: bronze_cms_billing_agreement_basket_scheduler
          notebook_task:
            notebook_path: ../ingest/incremental_ingest/bronze_cms_billing_agreement_basket_scheduler.py
          depends_on:
            - task_key: check-if-main-data-model-job-runs

        - task_key: bronze_cms_full
          notebook_task:
            notebook_path: ../ingest/full_ingest/bronze_cms_full.py
          depends_on: [
            {task_key: bronze_cms_billing_agreement_basket_deviations_and_products},
            {task_key: bronze_cms_billing_agreement_basket_scheduler}
          ]

        - task_key: dbt-run
          dbt_task:
            project_directory: ../transform/
            warehouse_id: ${var.warehouse_id}
            catalog: ${bundle.target}
            commands:
              - 'dbt deps'
              - 'dbt snapshot'
              - 'dbt run -s +estimations_log +active_basket_deviations_recent_weeks'
              - 'dbt test -s +estimations_log +active_basket_deviations_recent_weeks --indirect-selection cautious'
          job_cluster_key: dbt_CLI
          libraries:
            - pypi:
                package: dbt-databricks${var.dbt_databricks_version}
          disable_auto_optimization: true
          depends_on: [
            {task_key: bronze_cms_full},
            {task_key: bronze_psl_full}
          ]

        - task_key: dbt-test
          dbt_task:
            project_directory: ../transform/
            warehouse_id: ${var.warehouse_id}
            catalog: ${bundle.target}
            commands:
              - 'dbt deps'
              - 'dbt test -s +estimations_log +active_basket_deviations_recent_weeks --indirect-selection cautious'
          job_cluster_key: dbt_CLI
          libraries:
            - pypi:
                package: dbt-databricks${var.dbt_databricks_version}
          disable_auto_optimization: true
          depends_on: [
            {task_key: dbt-run}
          ]

        # The preselector uses the data created in this job, so it's loaded into the preselector at the end of the job
        - task_key: start_preselector_materialization
          run_job_task:
            job_id: ${var.preselector_materialization_job_id}
          depends_on: [
            {task_key: dbt-run}
          ]

        - task_key: fail-notification
          depends_on: [
            {task_key: check-if-main-data-model-job-runs},
            {task_key: bronze_cms_full},
            {task_key: bronze_psl_full},
            {task_key: bronze_cms_billing_agreement_basket_scheduler},
            {task_key: bronze_cms_billing_agreement_basket_deviations_and_products},
            {task_key: dbt-run},
            {task_key: dbt-test},
            {task_key: start_preselector_materialization}
          ]
          run_if: AT_LEAST_ONE_FAILED
          run_job_task:
            job_id: ${var.slack_notification_job_id}
            job_parameters:
              environment: ${bundle.target}
              header_message: ‚ùå Basket deviations hourly job failed
              body_message: Check the Databricks logs for more details
              is_error: true
              relevant_people: stephen, mats, sylvia, grant, engineering

      job_clusters:
        - job_cluster_key: dbt_CLI
          new_cluster:
            cluster_name: ""
            spark_version: 15.4.x-scala2.12
            spark_conf:
              spark.master: local[*, 4]
              spark.databricks.cluster.profile: singleNode
            azure_attributes:
              first_on_demand: 1
              availability: SPOT_WITH_FALLBACK_AZURE
              spot_bid_max_price: -1
            node_type_id: Standard_D4ds_v5
            custom_tags:
              ResourceClass: SingleNode
              tool: "Preselector"
              purpose: "transformation"
              env: ${bundle.target}
              managed_by: "manually"
              user: "dbt developers"
            spark_env_vars:
              PYSPARK_PYTHON: /databricks/python3/bin/python3
            enable_elastic_disk: true
            data_security_mode: SINGLE_USER
            runtime_engine: PHOTON
            num_workers: 0
