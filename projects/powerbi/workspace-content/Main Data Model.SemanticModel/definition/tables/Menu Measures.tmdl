/// This is where all measures relating to menus and recipes are found.
///
/// Recipe Ratings
/// This category contains the measures relating to recipe ratings and comments from customers.
table 'Menu Measures'
	lineageTag: 007c46b4-40eb-4dda-b8d8-38aff56cc4ff

	/// The number of unique recipes in the menu (not to be confused with main recipes)
	measure 'Number of Recipes in Menu' = DISTINCTCOUNTNOBLANK('Menu Measures'[recipe_id])
		formatString: #,0
		lineageTag: aa718a65-cb1e-4b91-8c98-f185b10bf852

	/// The number of unique menu ids.
	measure 'Number of Menus' = DISTINCTCOUNTNOBLANK('Menu Measures'[menu_id])
		formatString: #,0
		isHidden
		lineageTag: 1f670f36-e0c8-4565-acf8-ba11a315573d

	/// Returns the share of recipes with recipe rating above the target rating.
	/// The target rating is defined in the parameter 
	///'(Param) Recipe Rating Target Score Cheffelo' which by default is 77.
	measure 'Share of Recipes with Rating Above Target' =
			DIVIDE(
			    SUMX(
			        SELECTCOLUMNS(Recipes,Recipes[Recipe Id]),
			        IF(
						[Average Recipe Rating Score] > '(Param) Recipe Rating Target Score Cheffelo'[Recipe Rating Target Score Cheffelo Value], 
						1, 
						0
					)
			    ),
			    [Number of Recipes with Rating]
			)
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		displayFolder: Recipe Ratings

	/// The average value of the rating score.
	/// The rating score is the original rating 1-5 recalculated to a 0-100 scale.
	measure 'Average Recipe Rating Score' =
			CALCULATE(
				AVERAGE('Order Measures'[Recipe Rating Score])
				)
		formatString: 0.0
		lineageTag: dc8be7f2-eb6c-4959-84f1-088adf406654
		displayFolder: Recipe Ratings

	/// The number of unique comments posted.
	/// A unique comments means one customer commenting on one recipe.
	/// Even if the actual text is the same it will count as different if the customer or the recipe is different.
	measure 'Number of Recipe Comments' =
			CALCULATE(
				DISTINCTCOUNTNOBLANK('Order Measures'[Recipe Comment Id])
				)
		formatString: #,0
		lineageTag: bc6fcdf9-e3b7-431c-b52f-47695eb1dd7e
		displayFolder: Recipe Ratings

	/// The number of unique comments divided by the total number of dishes.
	/// The purpose of this measure is to be able to compare the number of comments between weeks when the number of dishes ordered varies.
	/// When more dishes are sold there will generally be more comments.
	measure 'Share of Ordered Dishes with Comment' =
			CALCULATE(
				[Number of Recipe Comments] / [Number of Ordered Dishes]
			)
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		lineageTag: 54e62f69-6bfa-4999-a6e9-2ad5846b25f0
		displayFolder: Recipe Ratings

	/// The number of unique customers posting a rating.
	/// Customers marking "dish not cooked" are included.
	measure 'Number of Rating Customers' =
			CALCULATE(
				DISTINCTCOUNTNOBLANK('Order Measures'[billing_agreement_id])
					, 'Order Measures'[Recipe Rating Id] <> BLANK()
				)
		formatString: #,0
		lineageTag: 370a5c81-d627-4103-9363-0f25903eeeb0
		displayFolder: Recipe Ratings

	/// The number of unique customer posting a rating divided by the total number of orders.
	/// Customers marking "dish not cooked" are included.
	/// The purpose of this measure is to be able to compare the number of customers posting a rating between weeks when the number of Customers varies.
	/// When more customers are ordering the number of customers posting a rating will also be higher.
	measure 'Share of Customers with Dish Rating' =
			CALCULATE(
				[Number of Rating Customers] / [Number of Customers]
			)
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		lineageTag: 30040681-4c5e-4a2f-88eb-7648269b6b95
		displayFolder: Recipe Ratings

	/// The number of dishes marked as "dish not cooked".
	/// Counts as unique with every customer marking each dish.
	/// Two customers marking the same dish as "not cooked" will count as 2.
	measure 'Number of Dishes Not Cooked' =
			CALCULATE(
				DISTINCTCOUNT('Order Measures'[Recipe Rating Id])
					, 'Order Measures'[is_not_cooked_dish] = TRUE()
				)+0
		formatString: 0
		lineageTag: ca52eb56-1016-4b87-b59c-4804b629d3ef
		displayFolder: Recipe Ratings

	/// The number of dishes marked as "dish not cooked" divided by the total number of ratings.
	/// The purpose of this measure is to be able to compare the number of dishes not cooked between weeks when the number of ratings varies.
	/// When the general attention to rating dishes is lower the number of dishes marked as not cooked will also be lower.
	measure 'Share of Rated Dishes not Cooked' =
			CALCULATE(
				[Number of Dishes Not Cooked] / [Number of Ratings]
				)
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		lineageTag: 39c7a96b-50ad-446b-a6b9-d5ea1670e2a2
		displayFolder: Recipe Ratings

	/// The number of unique ratings posted. A unique rating is the rating of one dish by one customer.
	/// If one customer rates 3 dishes and another rates 2 dishes, then these are 5 unique ratings regardless of which specific dishes they rated.
	/// Dish not cooked is excluded.
	measure 'Number of Ratings' =
			CALCULATE(
				DISTINCTCOUNTNOBLANK('Order Measures'[Recipe Rating Id])
					, 'Order Measures'[is_not_cooked_dish] = FALSE()
				)
		formatString: #,0
		lineageTag: c056ab91-83d4-4db3-aa8d-fb27ac10e9c2
		displayFolder: Recipe Ratings

	/// The number of unique ratings posted divided by the total number of dishes sold.
	/// The purpose of this measure is to be able to compare the number of ratings between weeks when the number of dishes sold varies.
	/// If fewer dishes are sold the number of ratings will also be lower.
	measure 'Share of Ordered Dishes with Rating' =
			CALCULATE(
				[Number of Ratings] / [Number of Ordered Dishes]
			)
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		lineageTag: bc329d84-dd32-46c0-9dd6-21157b306135
		displayFolder: Recipe Ratings

	/// The number of unique recipes that have received any rating.
	/// Dish not cooked is excluded.
	measure 'Number of Recipes with Rating' =
			CALCULATE(
				DISTINCTCOUNTNOBLANK('Order Measures'[recipe_id])
					, 'Order Measures'[Recipe Rating Id] <> BLANK()
					, 'Order Measures'[is_not_cooked_dish] = FALSE()
				)
		formatString: #,0
		lineageTag: 27195082-227f-4e26-8144-68af06a5c82b
		displayFolder: Recipe Ratings

	/// TODO: Use Portions instead once we have that in Databricks
	/// The number of servings in the recipes, i.e. the sum of portions in the recipes.
	measure 'Number of Servings in Menu' =
			CALCULATE(
				SUM('Menu Measures'[portions]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0
		isHidden

	measure 'Number of Recipe Variations in Menu' = 
			CALCULATE(
				COUNTROWS('Menu Measures'),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0
		isHidden

	/// The planned cost per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The planned cost is the cost used in menu planning.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Planned Cost per Serving in the Menu' =
			DIVIDE(
				[Ingredient Planned Cost in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Serving

	/// The planned cost whole units per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The planned cost is the cost used in menu planning, however, it is based on whole units of ingredients per recipe.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Planned Cost Whole Units per Serving in the Menu' =
			DIVIDE(
				[Ingredient Planned Cost Whole Units in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Serving

	/// The expected cost per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Expected Cost per Serving in the Menu' =
			DIVIDE(
				[Ingredient Expected Cost in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Serving

	/// The expected cost whole units per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Expected Cost Whole Units per Serving in the Menu' =
			DIVIDE(
				[Ingredient Expected Cost Whole Units in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Serving

	/// The planned cost per recipe in the menu.
	/// The planned cost is the cost used in menu planning.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Planned Cost per Recipe in the Menu' =
			DIVIDE(
				[Ingredient Planned Cost in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Recipe

	/// The planned cost whole units per recipe in the menu.
	/// The planned cost is the cost used in menu planning, however, it is based on whole units of ingredients per recipe.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Planned Cost Whole Units per Recipe in the Menu' =
			DIVIDE(
				[Ingredient Planned Cost Whole Units in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Recipe

	/// The expected cost per recipe in the menu..
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Expected Cost per Recipe in the Menu' =
			DIVIDE(
				[Ingredient Expected Cost in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Recipe

	/// The expected cost whole units per recipe in the menu.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Expected Cost Whole Units per Recipe in the Menu' =
			DIVIDE(
				[Ingredient Expected Cost Whole Units in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Recipe

	/// The planned cost per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The planned cost is the cost used in menu planning.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Planned Cost per Serving in the Menu] to see the cost contribution per serving of specific ingredients in the recipes.
	measure 'Recipe Planned Cost per Serving in the Menu' =
			DIVIDE(
				[Recipe Planned Cost in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Serving

	/// The planned cost whole units per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The planned cost is the cost used in menu planning, however, it is based on whole units of ingredients per recipe.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Planned Cost Whole Units per Serving in the Menu] to see the cost contribution per serving of specific ingredients in the recipes.
	measure 'Recipe Planned Cost Whole Units per Serving in the Menu' =
			DIVIDE(
				[Recipe Planned Cost Whole Units in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Serving

	/// The expected cost per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Expected Cost per Serving in the Menu] to see the cost contribution per serving of specific ingredients in the recipes.
	measure 'Recipe Expected Cost per Serving in the Menu' =
			DIVIDE(
				[Recipe Expected Cost in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Serving

	/// The expected cost whole units per serving in the menu.
	/// A serving is one portion of a recipe.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Expected Cost Whole Units per Serving in the Menu] to see the cost contribution per serving of specific ingredients in the recipes.
	measure 'Recipe Expected Cost Whole Units per Serving in the Menu' =
			DIVIDE(
				[Recipe Expected Cost Whole Units in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Serving

	/// The planned cost per recipe in the menu.
	/// The planned cost is the cost used in menu planning.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Planned Cost per Recipe in the Menu] to see the cost contribution per recipe of specific ingredients in the recipes.
	measure 'Recipe Planned Cost per Recipe in the Menu' =
			DIVIDE(
				[Recipe Planned Cost in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Recipe

	/// The planned cost whole units per recipe in the menu.
	/// The planned cost is the cost used in menu planning, however, it is based on whole units of ingredients per recipe.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Planned Cost Whole Units per Recipe in the Menu] to see the cost contribution per recipe of specific ingredients in the recipes.
	measure 'Recipe Planned Cost Whole Units per Recipe in the Menu' =
			DIVIDE(
				[Recipe Planned Cost Whole Units in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Recipe

	/// The expected cost per recipe in the menu.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Expected Cost per Recipe in the Menu] to see the cost contribution per recipe of specific ingredients in the recipes.
	measure 'Recipe Expected Cost per Recipe in the Menu' =
			DIVIDE(
				[Recipe Expected Cost in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Recipe

	/// The expected cost whole units per recipe in the menu.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Expected Cost Whole Units per Recipe in the Menu] to see the cost contribution per recipe of specific ingredients in the recipes.
	measure 'Recipe Expected Cost Whole Units per Recipe in the Menu' =
			DIVIDE(
				[Recipe Expected Cost Whole Units in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Recipe

	/// The CO2 emissions (in kg) per serving the menu.
	/// A serving is one portion of a recipe.
	/// The CO2 emission is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient CO2 Emissions per Serving in Menu' =
			DIVIDE(
				[Ingredient CO2 Emissions in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Ingredient

	/// The CO2 emissions (in kg) per serving the menu.
	/// A serving is one portion of a recipe.
	/// The CO2 emission is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will use the emission of all ingredients in the recipes that include any of the filtered ingredients, and not only the emission of the selected ingredients.
	/// Use [Ingredient CO2 Emissions per Serving in Menu] to see the emission contribution per serving of specific ingredients in the recipes.
	measure 'Recipe CO2 Emissions per Serving in Menu' =
			DIVIDE(
				[Recipe CO2 Emissions in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Recipe

	/// The CO2 emissions (in kg) per recipe the menu.
	/// The CO2 emission is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient CO2 Emissions per Recipe in Menu' =
			DIVIDE(
				[Ingredient CO2 Emissions in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Ingredient

	/// The CO2 emissions (in kg) per recipe the menu.
	/// The CO2 emission is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will use the emission of all ingredients in the recipes that include any of the filtered ingredients, and not only the emission of the selected ingredients.
	/// Use [Ingredient CO2 Emissions per Recipe in Menu] to see the emission contribution per recipe of specific ingredients in the recipes.
	measure 'Recipe CO2 Emissions per Recipe in Menu' =
			DIVIDE(
				[Recipe CO2 Emissions in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Recipe

	/// The sum of the planned ingredient purchasing cost for the exact quantity of all included ingredients.
	/// The planned cost is the cost used in menu planning.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Planned Cost in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_planned_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost

	/// The sum of the planned ingredient purchasing cost  for the quantity of all included ingredients, where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// The planned cost is the cost used in menu planning.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Planned Cost Whole Units in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_planned_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost

	/// The sum of the expected ingredient cost for the exact quantity of all included ingredients.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Expected Cost in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_expected_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost

	/// The sum of the expected ingredient cost for the quantity of all included ingredients, where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Expected Cost Whole Units in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_expected_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost

	/// The sum of the actual ingredient cost for the exact quantity of all included ingredients.
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Actual Cost in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_actual_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost

	/// The sum of the actual ingredient cost for the quantity of all included ingredients, where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Actual Cost Whole Units in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_actual_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	measure 'Ingredient CO2 Emissions in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_co2_emissions]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Ingredient

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes, where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	measure 'Ingredient CO2 Emissions Whole Units in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_co2_emissions_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Ingredient

	/// Hidden measure?
	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data.
	measure 'Ingredient Weight in Menu with CO2 Data' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_weight_with_co2_data]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Ingredient

	/// TODO: Unhide once underlying data is ok
	/// The CO2 emissions in kg per kg of ingredients in the recipes.
	/// It is calculated by dividing the total CO2 emissions from the ingredients in the recipes by the total net weight of the ingredients in the recipes that have registered CO2 emission data.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient CO2 Emissions per kg, in Menu' =
			DIVIDE(
				[Ingredient CO2 Emissions in Menu],
				[Ingredient Weight in Menu with CO2 Data]/1000
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Ingredient

	/// The sum of the planned recipe cost for the exact quantity of all included ingredients in the recipe.
	/// The planned cost is the cost used in menu planning.
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Planned Cost in Menu] to see the cost of specific ingredients in the recipes.
	measure 'Recipe Planned Cost in Menu' =
			CALCULATE(
				SUM('Menu Measures'[total_ingredient_planned_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the planned recipe cost for the quantity of all included ingredients in the recipe, where the ingredient quantity is rounded up to whole units per recipe.
	/// The planned cost is the cost used in menu planning.
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Planned Cost Whole Units in Menu] to see the cost of specific ingredients in the recipes.
	measure 'Recipe Planned Cost Whole Units in Menu' =
			CALCULATE(
				SUM('Menu Measures'[total_ingredient_planned_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the expected recipe cost for the exact quantity of all included ingredients in the recipe.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Expected Cost in Menu] to see the cost of specific ingredients in the recipes.
	measure 'Recipe Expected Cost in Menu' =
			CALCULATE(
				SUM('Menu Measures'[total_ingredient_expected_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the expected recipe cost for the quantity of all included ingredients in the recipe, where the ingredient quantity is rounded up to whole units per recipe.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient Expected Cost Whole Units in Menu] to see the cost of specific ingredients in the recipes.
	measure 'Recipe Expected Cost Whole Units in Menu' =
			CALCULATE(
				SUM('Menu Measures'[total_ingredient_expected_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\by Recipe

	/// The total amount of registered co2 emissions (in kg) for all ingredients in the filtered recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return the emission of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient CO2 Emissions in Menu] to see the emission of specific ingredients in the recipes.
	measure 'Recipe CO2 Emissions in Menu' =
			CALCULATE(
				SUM('Menu Measures'[total_ingredient_co2_emissions]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// The total amount of registered co2 emissions (in kg) for all ingredients in the filtered recipes, where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return the emission of all ingredients in the recipes that include any of the filtered ingredients, and not only the cost of the selected ingredients.
	/// Use [Ingredient CO2 Emissions in Menu] to see the emission of specific ingredients in the recipes.
	measure 'Recipe CO2 Emissions Whole Units in Menu' =
			CALCULATE(
				SUM('Menu Measures'[total_ingredient_co2_emissions_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// Hidden measure?
	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data.
	measure 'Recipe Weight in Menu with CO2 Data' =
			CALCULATE(
				SUM('Menu Measures'[total_ingredient_weight_with_co2_data]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// TODO: Unhide once underlying data is ok
	/// The CO2 emissions in kg per kg of ingredients in the recipes in the menu.
	/// It is calculated by dividing the total CO2 emissions from the ingredients in the recipes by the total net weight of the ingredients in the recipes that have registered CO2 emission data.
	/// If filtered on specific ingredients, it will do this calculations using all ingredients in the recipes that include any of those ingredients, and not only the ingredients selected.
	measure 'Recipe CO2 Emissions per kg, in Menu' =
			DIVIDE(
				[Recipe CO2 Emissions in Menu],
				[Recipe Weight in Menu with CO2 Data]/1000
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// The total quantity of ingredients in the recipes.
	/// This is the sum of the quantity of all ingredients in the recipes, that is included in the selection.
	measure 'Ingredient Quantity in Menu' = 
			CALCULATE(
				SUM('Recipe Ingredients'[ingredient_order_quantity]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// The total quantity of ingredients per recipe.
	/// This is the sum of the quantity of all ingredients in the recipes, that is included in the selection.
	measure 'Ingredient Quantity per Recipe in Menu' = 
			DIVIDE(
				[Ingredient Quantity in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Amount

	/// The total quantity of ingredients per serving.
	/// This is the sum of the quantity of all ingredients in the recipes, that is included in the selection.
	measure 'Ingredient Quantity per Serving in Menu' = 
			DIVIDE(
				[Ingredient Quantity in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Amount

	/// The weight of the ingredients (in grams) in the recipes in the menu.
	/// This is the sum of the ingredient weight of all ingredients in the recipes, that is included in the selection.
	measure 'Ingredient Weight in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_weight]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// The weight of the ingredients in the recipes in the menu, based on ingredient quantity in whole units per recipe.
	/// This is the sum of the ingredient weight of all ingredients in the recipes, that is included in the selection.
	measure 'Ingredient Weight Whole Units in Menu' =
			CALCULATE(
				SUM('Recipe Ingredients'[total_ingredient_weight_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// TODO: Unhide once underlying data is ok
	/// The weight of the ingredients (in grams) per recipe in the menu, based on ingredient quantity in whole units per recipe.
	/// This is the sum of the ingredient weight of all ingredients in the recipes, that is included in the selection, divided by the number of recipes.
	measure 'Ingredient Weight Whole Units per Recipe in Menu' =
			DIVIDE(
				[Ingredient Weight Whole Units in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// TODO: Unhide once underlying data is ok
	/// The weight of the ingredients (in grams) per recipe serving in the menu, based on ingredient quantity in whole units per recipe.
	/// This is the sum of the ingredient weight of all ingredients in the recipes, that is included in the selection, divided by the number of servings.
	measure 'Ingredient Weight Whole Units per Serving in Menu' =
			DIVIDE(
				[Ingredient Weight Whole Units in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// TODO: Unhide once underlying data is ok
	/// The weight of the ingredients (in grams) per recipe in the menu, based on the exact ingredient quantity in the recipes.
	/// This is the sum of the ingredient weight of all ingredients in the recipes, that is included in the selection, divided by the number of recipes.
	measure 'Ingredient Weight per Recipe in Menu' =
			DIVIDE(
				[Ingredient Weight in Menu],
				[Number of Recipe Variations in Menu]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// TODO: Unhide once underlying data is ok
	/// The weight of the ingredients per recipe serving in the menu, based on the exact ingredient quantity in the recipes.
	/// This is the sum of the ingredient weight of all ingredients in the recipes, that is included in the selection, divided by the number of servings.
	measure 'Ingredient Weight per Serving in Menu' =
			DIVIDE(
				[Ingredient Weight in Menu],
				[Number of Servings in Menu]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// The average planned cost of ingredients in the menu.
	/// It is calculated by dividing the total planned cost of ingredients in the menu by the total quantity of ingredients in the menu.
	measure 'Ingredient Planned Cost per Ingredient Quantity in Menu' = 
			DIVIDE(
				[Ingredient Planned Cost in Menu],
				[Ingredient Quantity in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Ingredient

	/// The average expected cost of ingredients in the menu.
	/// It is calculated by dividing the total expected cost of ingredients in the menu by the total quantity of ingredients in the menu.
	measure 'Ingredient Expected Cost per Ingredient Quantity in Menu' = 
			DIVIDE(
				[Ingredient Expected Cost in Menu],
				[Ingredient Quantity in Menu]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Ingredient

	/// TODO: Unhide once underlying data is ok
	/// The average planned cost per kg of ingredients in the menu.
	/// It is calculated by dividing the total planned cost of ingredients in the menu by the total weight of ingredients in the menu.
	measure 'Ingredient Planned Cost per kg, in Menu' = 
			DIVIDE(
				[Ingredient Planned Cost in Menu],
				[Ingredient Weight in Menu]/1000
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\by Ingredient\per Ingredient

	/// TODO: Unhide once underlying data is ok
	/// The average expected cost per kg of ingredients in the menu.
	/// It is calculated by dividing the total expected cost of ingredients in the menu by the total weight of ingredients in the menu.
	measure 'Ingredient Expected Cost per kg, in Menu' = 
			DIVIDE(
				[Ingredient Expected Cost in Menu],
				[Ingredient Weight in Menu]/1000
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\by Ingredient\per Ingredient

	/// The cost share of the selected ingredients within the recipes that contain them.
	/// It is calculated as [Ingredient Planned Cost Whole Units in Menu]/[Recipe Planned Cost Whole Units in Menu].
	measure 'Ingredient Planned Cost Whole Units Share of Whole Recipes in Menu' = 
			DIVIDE(
				[Ingredient Planned Cost Whole Units in Menu],
				[Recipe Planned Cost Whole Units in Menu]
			)
		formatString: #,0.00%
		displayFolder: Ingredient Cost\by Ingredient\Share of Recipes

	/// The cost share of the selected ingredients within the recipes that contain them.
	/// It is calculated as [Ingredient Expected Cost Whole Units in Menu]/[Recipe Expected Cost Whole Units in Menu].
	measure 'Ingredient Expected Cost Whole Units Share of Whole Recipes in Menu' = 
			DIVIDE(
				[Ingredient Expected Cost Whole Units in Menu],
				[Recipe Expected Cost Whole Units in Menu]
			)
		formatString: #,0.00%
		displayFolder: Ingredient Cost\by Ingredient\Share of Recipes

	/// The emission share of the selected ingredients within the recipes that contain them.
	/// It is calculated as [Ingredient CO2 Emissions in Menu]/[Recipe CO2 Emissions in Menu].
	measure 'Ingredient CO2 Emission Share of Whole Recipes in Menu' = 
			DIVIDE(
				[Ingredient CO2 Emissions in Menu],
				[Recipe CO2 Emissions in Menu]
			)
		formatString: #,0.00%
		displayFolder: CO2 Emissions\by Ingredient

	/// The net weight (in grams) for the total ingredient amount in the recipe.
	column total_ingredient_weight
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight

		annotation SummarizationSetBy = Automatic

	/// The net weight (in grams) of the ingredients, based on ingredient quantity in whole units.
	column total_ingredient_weight_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_whole_units

		annotation SummarizationSetBy = Automatic

	/// The menu planning purchasing cost for the total ingredient amount in the recipe.
	column total_ingredient_planned_cost
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_planned_cost

		annotation SummarizationSetBy = Automatic

	/// The menu planning purchasing cost based on ingredient quantity in whole units. 
	/// It is calculated as the sum of the cost of the recipe ingredients based on the quantity used in the recipe rounded up to the nearest integer. 
	column total_ingredient_planned_cost_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_planned_cost_whole_units

		annotation SummarizationSetBy = Automatic

	/// The expected purchasing cost for the total ingredient amount in the recipe. 
	/// The expected cost includes discounts or other price adjustment (variable cost unit) if set, as opposed to the planned cost that does not take the variable cost into account.
	column total_ingredient_expected_cost
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_expected_cost

		annotation SummarizationSetBy = Automatic

	/// The expected purchasing cost based on ingredient quantity in whole units. 
	/// The expected cost includes discounts or other price adjustment (variable cost unit) if set, as opposed to the planned cost that does not take the variable cost into account. 
	/// This field is calculated as the sum of the expected cost of the recipe ingredients based on the quantity used in the recipe rounded up to the nearest integer.
	column total_ingredient_expected_cost_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_expected_cost_whole_units

		annotation SummarizationSetBy = Automatic

	/// The actual purchasing cost for the total ingredient amount of the recipe. 
	/// It is fetched from the purchasing order(s) for the menu week of the recipe and calculated as the actual purchasing cost of the orders, divided by the quantity in the orders, multiplied with the ingredient quantity in the recipe.
	column total_ingredient_actual_cost
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_actual_cost

		annotation SummarizationSetBy = Automatic

	/// The actual purchasing cost for the total ingredient amount of the recipe. 
	/// It is fetched from the purchasing order(s) for the menu week of the recipe and calculated by dividing the actual purchasing cost of the orders by the ordered quantity, and then multipling it with the ingredient quantity (rounded up to whole units) in the recipe.
	column total_ingredient_actual_cost_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_actual_cost_whole_units

		annotation SummarizationSetBy = Automatic

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data. For meaningful analysis, use this field together with total_ingredient_weight_with_co2_data to calculate emissions per kg of food in the recipes.
	column total_ingredient_co2_emissions
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_co2_emissions

		annotation SummarizationSetBy = Automatic

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity (rounded up to whole units) of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data. For meaningful analysis, use this field together with total_ingredient_weight_with_co2_data_whole_units to calculate emissions per kg of food in the recipes.
	column total_ingredient_co2_emissions_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_co2_emissions_whole_units

		annotation SummarizationSetBy = Automatic

	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data.
	column total_ingredient_weight_with_co2_data
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_with_co2_data

		annotation SummarizationSetBy = Automatic

	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data, where the quantity of the ingredients is rounded up to whole units.
	column total_ingredient_weight_with_co2_data_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_with_co2_data_whole_units

		annotation SummarizationSetBy = Automatic

	/// The number of portions in each variation of the recipe.
	column portions
		dataType: int64
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: portions

		annotation SummarizationSetBy = Automatic

	column weekly_menu_id
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 87bba871-32d9-402a-9600-49f3bcdeb8f4
		summarizeBy: sum
		sourceColumn: weekly_menu_id

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column menu_id
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 49f2a2a1-76cf-4d75-a746-76a243bef515
		summarizeBy: sum
		sourceColumn: menu_id

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column recipe_id
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: bd5730d4-82e2-43a2-94df-67d3e0bdda45
		summarizeBy: sum
		sourceColumn: recipe_id

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_recipes
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 6b67936c-2eb6-4a73-8cae-d1d3d15320df
		summarizeBy: none
		sourceColumn: fk_dim_recipes

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_dates
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 3a2fe65b-2943-4dbc-bf84-f0292bd6183a
		summarizeBy: none
		sourceColumn: fk_dim_dates

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_companies
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 1b4be08f-b320-4b37-b560-5cb387b73139
		summarizeBy: none
		sourceColumn: fk_dim_companies

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_products
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: ed5ba6b8-3550-4f26-ad71-99a443706e58
		summarizeBy: none
		sourceColumn: fk_dim_products

		annotation SummarizationSetBy = Automatic

	column fk_dim_portions
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_portions

	/// Primary key of the dim_ingredient_combinations table
    column fk_dim_ingredient_combinations
        dataType: string
        isHidden
        isAvailableInMdx: false
        summarizeBy: none
        sourceColumn: fk_dim_ingredient_combinations

	/// Primary key of the dim_price_categories
    column fk_dim_price_categories
        dataType: string
        isHidden
        isAvailableInMdx: false
        summarizeBy: none
        sourceColumn: fk_dim_price_categories

	partition 'Menu Measures' = m
		mode: directQuery
		source =
				let
				    Source = Databricks.Catalogs(Host, HttpPath, [Catalog=null, Database=null, EnableAutomaticProxyDiscovery=null]),
				    catalog_Database = Source{[Name=Catalog,Kind="Database"]}[Data],
				    gold_Schema = catalog_Database{[Name=Schema,Kind="Schema"]}[Data],
				    fact_menus_Table = gold_Schema{[Name="fact_menus",Kind="Table"]}[Data]
				in
				    fact_menus_Table

	annotation PBI_ResultType = Exception

	annotation PBI_NavigationStepName = Navigation
