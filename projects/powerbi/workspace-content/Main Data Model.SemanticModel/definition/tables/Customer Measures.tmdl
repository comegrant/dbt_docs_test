table 'Customer Measures'
	isHidden
	lineageTag: d05b49b2-fb42-46e1-9a85-76404c8a551e

	/// This is a hidden measure that can be used to create other measures.
	/// It will be a count of changes related to agreements, and represent the agreements after the change.
	/// The change could be anything, e.g. status, preferences, subscribed products, loyalty level etc.
	/// Since the change could be anything, the measure is hidden and should be used to create other measures where the change is specified.
	measure 'Number of Agreement Changes to Filtered State' = COUNTROWS('Customer Measures')
		formatString: #,0
		isHidden
		lineageTag: 098c92f8-30b6-4563-a7ec-b556839eceef

	/// This is a hidden measure that can be used to create other measures.
	/// It will be a count of changes related to agreements, and represent the agreements before the change.
	/// The change could be anything, e.g. status, preferences, subscribed products, loyalty level etc.
	/// Since the change could be anything, the measure is hidden and should be used to create other measures where the change is specified.
	measure 'Number of Agreement Changes from Filtered State' =
			CALCULATE(
				COUNTROWS('Customer Measures'),
				USERELATIONSHIP('Customer Measures'[fk_dim_billing_agreements_previous_version],'Billing Agreements'[pk_dim_billing_agreements])
			)
		formatString: #,0
		isHidden
		lineageTag: bb5e3faf-1d2a-4b8e-be86-438d234cebb5

	/// Number of Customers included all statuses (also included deleted).
	measure 'Number of Customers All Statuses' =
			CALCULATE(
				[Number of Agreement Changes to Filtered State] - [Number of Agreement Changes from Filtered State],
				ALL('Dates'),
				'Dates'[Date] <= MAX('Dates'[Date])
			)
		formatString: #,0
		lineageTag: fd14e082-b1f9-477a-8dfc-6ac06324ce11

	/// Number of Active Customers
	measure 'Number of Active Customers' =
			CALCULATE(
				[Number of Customers All Statuses],
				FILTER(
					'Dates',
					Dates[Date]=MAX(Dates[Date])
				),
				'Billing Agreements'[Billing Agreement Status]="Active"
			)
		formatString: #,0
		lineageTag: 97c48411-d8b8-4fa8-aa51-3eea12e119f2

	/// Number of Active Customers same period last year.
	measure 'Number of Active Customers PY' =
			CALCULATE(
				[Number of Active Customers],
				SAMEPERIODLASTYEAR('Dates'[Date]),
				ALL('Dates')
			)
		formatString: #,0
		lineageTag: 19d1851e-5f07-4655-a252-cb0338ba7fdb

	/// Number of customers (included all statuses) same period last year.
	measure 'Number of Customers All Statuses PY' =
			CALCULATE(
				[Number of Active Customers],
				SAMEPERIODLASTYEAR('Dates'[Date]),
				ALL('Dates')
			)
		formatString: #,0
		lineageTag: a840a69a-c3f1-4878-ae41-b99013d1b47d

	/// Number of customers having their first delivery on the corresponding menu week.
	measure 'Number of Customers with First Delivery' =
			CALCULATE(
				COUNTROWS('Customer Measures'),
				'Customer Measures'[has_first_delivery]=TRUE(),
				USERELATIONSHIP(
					'Customer Measures'[fk_dim_dates_first_menu_week],
					'Dates'[pk_dim_dates]
				)
			)
		formatString: #,0
		lineageTag: 6ab987c5-f8dc-4b42-97cd-427d7b732eb6

	/// Number of customers having their first delivery, same period last year.
	/// It compares the same dates in the previous year (not the same weeks).
	/// The data team is working on a more general solution for time period comparison, so that it can be used to compare the same weeks the previous year.
	measure 'Number of Customers with First Delivery PY' =
			CALCULATE(
				[Number of Customers with First Delivery],
				ALL('Dates'),
				SAMEPERIODLASTYEAR('Dates'[Date])
			)
		formatString: #,0
		lineageTag: bca7b0e3-22e6-492d-972f-1a0edd49f9f8

	/// Number of customers having their first delivery, same period last year. This uses calendar year.
	measure 'Number of Customers with First Delivery YTD' =
			TOTALYTD(
				[Number of Customers with First Delivery],
				Dates[Date],
				ALL('Dates')
			)
		formatString: #,0
		lineageTag: 359e8c41-e175-4c30-bb88-eb271fba3181

	/// Number of customers having their first delivery, year to date, same period last year.
	/// It compares the same dates in the previous year (not the same weeks).
	/// The data team is working on a more general solution for time period comparison, so that it can be used to compare the same weeks the previous year.
	measure 'Number of Customers with First Delivery YTD PY' =
			TOTALYTD(
				[Number of Customers with First Delivery PY],
				Dates[Date],
				ALL('Dates')
			)
		formatString: #,0
		lineageTag: 214a91d8-fc9a-4084-8144-625b9cb7a7f6

	/// Number of new registered agreements on the day they signed up. They do not need to have had a delivery.
	measure 'Number of Sign-ups' =
			CALCULATE(
				COUNTROWS('Customer Measures'),
				'Customer Measures'[is_signup]=TRUE()
			)
		formatString: #,0
		lineageTag: 7cdf8cd7-4766-4a7c-acf8-d5b435ac1b1e

	/// Number of new sign-ups same period last year. Compares the same dates in the previous year (not the same weeks).
	measure 'Number of Sign-ups PY' =
			CALCULATE(
				[Number of Sign-ups],
				ALL('Dates'),
				SAMEPERIODLASTYEAR('Dates'[Date])
			)
		formatString: #,0
		lineageTag: 801ee2fa-401a-46de-8c57-f8354b3470b4

	/// Number of new sign-ups Year to Date. This uses the calendar year.
	measure 'Number of Sign-ups YTD' =
			TOTALYTD(
				[Number of Sign-ups],
				Dates[Date],
				ALL('Dates')
			)
		formatString: #,0
		lineageTag: 69492a6f-2f2b-4b14-8d67-ca182e031ee0

	/// Number of new sign-ups Year to Date, same period last year. This uses the calendar year.
	measure 'Number of Sign-ups YTD PY' =
			TOTALYTD(
				[Number of Sign-ups PY],
				Dates[Date],
				ALL('Dates')
			)
		formatString: #,0
		lineageTag: c9fc05d1-f58a-46ce-a71e-b25dc72992ad

	/// Number of customers changed from active to another status during the selected period.
	/// It will count number of customers that was in a active state at the beginning of the selected period
	/// and was in another status at the end of the selected period.
	measure 'Number of Customers Changed from Active' =
			SUMX(
				VALUES('Billing Agreements'[Agreement Id]),
			
				VAR min_updated_at = CALCULATE(
					MIN('Customer Measures'[updated_at]),
					'Customer Measures'[has_updated_status]=TRUE(),
					ALL('Customer Measures'[updated_at]),
					'Customer Measures'[updated_at]>MIN('Dates'[Date])
				)
			
				VAR max_updated_at = CALCULATE(
					MAX('Customer Measures'[updated_at]),
					'Customer Measures'[has_updated_status]=TRUE(),
					ALL('Customer Measures'[updated_at]),
					'Customer Measures'[updated_at]<=MAX('Dates'[Date])
				)
			
				VAR CountStart =
					CALCULATE(
						COUNTROWS('Customer Measures'),
						'Customer Measures'[has_updated_status]=TRUE(),
						'Customer Measures'[updated_at] = min_updated_at,
						USERELATIONSHIP(
							'Customer Measures'[fk_dim_billing_agreements_previous_version],
							'Billing Agreements'[pk_dim_billing_agreements]
						),
						'Billing Agreements'[Billing Agreement Status] = "Active"
					)
			
				VAR CountEnd =
					CALCULATE(
						COUNTROWS('Customer Measures'),
						'Customer Measures'[has_updated_status]=TRUE(),
						'Customer Measures'[updated_at] = max_updated_at,
						'Billing Agreements'[Billing Agreement Status] <> "Active"
					)
			
				RETURN
					IF(CountStart>0 && CountEnd>0, 1, 0)
			)
		formatString: #,0
		lineageTag: a950a2a5-a013-47d2-b69e-01e8337bf788

	/// Number of customers changed to active from another status during the selected period.
	/// It will count number of customers that was not in a active state at the beginning of the selected period
	/// but was active at the end of the selected period.
	measure 'Number of Customers Changed to Active' =
			SUMX(
				VALUES('Billing Agreements'[Agreement Id]),
			
				VAR min_updated_at = CALCULATE(
					MIN('Customer Measures'[updated_at]),
					'Customer Measures'[has_updated_status]=TRUE(),
					ALL('Customer Measures'[updated_at]),
					'Customer Measures'[updated_at]>MIN('Dates'[Date])
				)
			
				VAR max_updated_at = CALCULATE(
					MAX('Customer Measures'[updated_at]),
					'Customer Measures'[has_updated_status]=TRUE(),
					ALL('Customer Measures'[updated_at]),
					'Customer Measures'[updated_at]<=MAX('Dates'[Date])
				)
			
				VAR CountStart =
					CALCULATE(
						COUNTROWS('Customer Measures'),
						'Customer Measures'[has_updated_status]=TRUE(),
						'Customer Measures'[updated_at] = min_updated_at,
						USERELATIONSHIP(
							'Customer Measures'[fk_dim_billing_agreements_previous_version],
							'Billing Agreements'[pk_dim_billing_agreements]
						),
						'Billing Agreements'[Billing Agreement Status] <> "Active"
					)
			
				VAR CountEnd =
					CALCULATE(
						COUNTROWS('Customer Measures'),
						'Customer Measures'[has_updated_status]=TRUE(),
						'Customer Measures'[updated_at] = max_updated_at,
						'Billing Agreements'[Billing Agreement Status] = "Active"
					)
			
				RETURN
					IF(CountStart>0 && CountEnd>0, 1, 0)
			)
		formatString: #,0
		lineageTag: 60ba4403-dc9a-4221-b046-d3dea3afa7bb

	/// Number of customers who have swapped at least once during the selected period.
	/// To see the definition of a swap, see the measure 'Number of Orders with Swaps'.
	/// If the customer switched out dishes in a week, but never placed the order for the week, it will not be counted as a swap.
	measure 'Number of Swapping Customers' =
						CALCULATE(
			    			'Order Measures'[Number of Ordering Customers],
			    			FILTER(
			    			    SELECTCOLUMNS('Billing Agreements',[Agreement Id]),
			    			    'Order Measures'[Number of Orders with Swaps] > 0
			    			)
						)
		formatString: #,0
		lineageTag: ea08cc3e-e123-4ca0-bdca-efbdee4c4503

	column fk_dim_dates
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 2339b5f4-23a1-4976-8c4e-1118b81acc5d
		summarizeBy: none
		sourceColumn: fk_dim_dates

	column fk_dim_dates_first_menu_week
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 4604683a-76ce-46e0-aa4e-0e209dce255a
		summarizeBy: none
		sourceColumn: fk_dim_dates_first_menu_week

	column fk_dim_billing_agreements
		dataType: string
		isHidden
		lineageTag: 872cd44f-1a3c-4389-a68a-c9dbafb4c1f1
		summarizeBy: none
		sourceColumn: fk_dim_billing_agreements

	column fk_dim_companies
		dataType: string
		isHidden
		lineageTag: af0a4864-3640-4f3e-9625-8a4056012709
		summarizeBy: none
		sourceColumn: fk_dim_companies

	column fk_dim_periods_since_first_order
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 397e0242-a70c-41bd-b502-9d0b824930ef
		summarizeBy: none
		sourceColumn: fk_dim_periods_since_first_order

	column fk_dim_billing_agreements_previous_version
		dataType: string
		isHidden
		lineageTag: 199a8f38-e0f7-4d40-b339-3d5614ef0303
		summarizeBy: none
		sourceColumn: fk_dim_billing_agreements_previous_version

	column is_signup
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 547b23be-2626-4226-ab5a-4d1a40d602bf
		summarizeBy: none
		sourceColumn: is_signup

		annotation SummarizationSetBy = Automatic

	column has_first_delivery
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: d2254bd2-67d7-4983-a45b-a51d1bb81f99
		summarizeBy: none
		sourceColumn: has_first_delivery

	column updated_at
		dataType: dateTime
		isHidden
		formatString: General Date
		lineageTag: 4ce62ea5-cd85-4b36-95b5-de4ab6e27869
		summarizeBy: none
		sourceColumn: updated_at

		annotation SummarizationSetBy = Automatic

	column has_updated_preferences
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 7b13bc7d-37e2-48ed-ba57-bbcca1f5e09a
		summarizeBy: none
		sourceColumn: has_updated_preferences

		annotation SummarizationSetBy = Automatic

	column has_updated_subscribed_products
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 4270fc48-232a-4ab6-b4f9-000fe8b8c833
		summarizeBy: none
		sourceColumn: has_updated_subscribed_products

		annotation SummarizationSetBy = Automatic

	column has_updated_status
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 8022d5db-8215-48d5-a56a-d9fe89f3544c
		summarizeBy: none
		sourceColumn: has_updated_status

		annotation SummarizationSetBy = Automatic

	column has_updated_onesub_flag
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 78aa83be-2227-4eea-ab1c-5de847a692e1
		summarizeBy: none
		sourceColumn: has_updated_onesub_flag

		annotation SummarizationSetBy = Automatic

	column billing_agreement_id
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: a7cdedca-7809-42e2-b766-52f21fa31e79
		summarizeBy: none
		sourceColumn: billing_agreement_id

	column has_updated_loyalty_level
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 7b2d0a2b-dfd4-41f1-90d2-f06ad8453859
		summarizeBy: none
		sourceColumn: has_updated_loyalty_level

	partition 'Customer Measures' = m
		mode: directQuery
		source =
				let
					Source = Databricks.Catalogs(Host, HttpPath, [Catalog=null, Database=null, EnableAutomaticProxyDiscovery=null]),
					catalog_Database = Source{[Name=Catalog,Kind="Database"]}[Data],
					gold_Schema = catalog_Database{[Name=Schema,Kind="Schema"]}[Data],
					fact_billing_agreement_updates_Table = gold_Schema{[Name="fact_billing_agreement_updates",Kind="Table"]}[Data]
				in
					fact_billing_agreement_updates_Table

