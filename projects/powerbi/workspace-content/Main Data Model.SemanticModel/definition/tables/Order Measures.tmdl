table 'Order Measures'
	lineageTag: 6c298811-8ad5-482b-b89a-827db89210a3

	/// Total order value excluding vat
	measure 'Total Order Value Ex Vat' =

			CALCULATE(
			    SUM('Order Measures'[total_amount_ex_vat]),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)

			)
		isHidden
		lineageTag: 9514c3b0-8d1c-49a4-a547-99ac13fa089d

		changedProperty = IsHidden

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Order value including VAT
	measure 'Total Order Value Inc Vat' =

			CALCULATE(
			    SUM('Order Measures'[total_amount_inc_vat]),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		isHidden
		lineageTag: 5cba6729-7b7c-48ce-9c67-e695bff2c63a

		changedProperty = IsHidden

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Number of orders
	measure 'Number of Orders' =
			CALCULATE(
				DISTINCTCOUNTNOBLANK('Order Measures'[billing_agreement_order_id]),
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0
		displayFolder: Orders
		lineageTag: d7731cff-64d8-45f8-ad92-7833eb7a22e9

	/// Number of orders where the customers order included a printed recipe leaflet.
	measure 'Number of Orders with Recipe Leaflet' = CALCULATE([Number of Orders], 'Order Measures'[has_recipe_leaflets] = TRUE())
		formatString: #,0
		displayFolder: Digital Recipes
		lineageTag: cf598a2d-2b0e-4370-959f-3d0dab5bbcec

	/// Share of orders where the customers order included a printed recipe leaflet.
	measure 'Share of Orders with Recipe Leaflet' = DIVIDE([Number of Orders], [Number of Orders with Recipe Leaflet])
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Digital Recipes

	/// Sum of Product Variation Quantity
	measure 'Product Variation Quantity' =

			CALCULATE(
			    SUM('Order Measures'[product_variation_quantity]),
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0
		isHidden
		displayFolder: Orders
		lineageTag: 6da36c65-3977-4355-9613-98ce2076a5ba

		changedProperty = IsHidden

	/// Sum of Subscribed Product Variation Quantity
	measure 'Subscribed Product Variation Quantity' =

			CALCULATE(
			    SUM('Order Measures'[product_variation_quantity_subscription]),
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0
		isHidden
		displayFolder: Orders

		changedProperty = IsHidden

	/// Sum of Subscribed Product Variation Amount Ex Vat
	measure 'Subscribed Product Variation Amount Ex Vat' =

			CALCULATE(
				SUM('Order Measures'[total_amount_ex_vat_subscription]),
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				USERELATIONSHIP(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
					'Billing Agreements Deviation'[pk_dim_billing_agreements]
				),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
					'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0.00
		isHidden
		displayFolder: Orders

		changedProperty = IsHidden

	/// Average price per unit
	/// Including VAT
	/// Example: A person bought 2 cucumbers, 1 milk and 1 apple. If we want to
	/// know the average price paid per grocery item. This would give you the
	/// order value divided by 4 (number of products)
	measure 'Average Unit Price Inc Vat' = DIVIDE([Total Order Value Inc Vat],[Number of Ordered Units])
		isHidden
		displayFolder: Ordered Units
		lineageTag: 01e8c74d-66dd-4082-bcee-a4c91dcc5c76

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Average price per unit
	/// Excluding VAT
	measure 'Average Unit Price Ex Vat' = DIVIDE([Total Order Value Ex Vat],[Number of Ordered Units])
		isHidden
		displayFolder: Ordered Units
		lineageTag: 461d3a40-d20c-45d2-aa78-46a36a2ce6ac

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Number of sold gift cards
	measure 'Number of Sold Gift Cards' =
			CALCULATE(
				[Number of Orders],
				'Order Types'[Order Type] = "Gift Card",
				'Order Measures'[has_finished_order_status] = TRUE()
			)
		formatString: #,0
		displayFolder: Gift Cards
		lineageTag: 1b7a5c95-92ad-44ef-b403-00fd4b24f4af

	/// Total net order value
	/// Excluding VAT
	measure 'Order Value Net Ex Vat' =
			CALCULATE(
				[Total Order Value Ex Vat],
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE()
				)
		displayFolder: Orders
		lineageTag: 94703f73-cb72-4c7c-ba82-9d480c9385ca

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Net order value
	/// Including VAT
	measure 'Order Value Net Inc Vat' =
			CALCULATE(
				[Total Order Value Inc Vat],
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE()
				)
		displayFolder: Orders
		lineageTag: 47be5d17-2f0a-42c6-8b21-24dea811838e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Gross order value
	/// Excluding VAT
	measure 'Order Value Gross Ex Vat' =
			CALCULATE(
				[Total Order Value Ex Vat],
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				'Order Measures'[order_line_type_name] IN {"DEBIT", "TRANSPORT"}
				)
		displayFolder: Orders
		lineageTag: 9db412c4-2ea6-4c39-81b2-c68ec727df34

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Average net order value
	/// Excluding VAT
	measure 'ATV Net Ex Vat' = DIVIDE([Order Value Net Ex Vat],[Number of Orders],BLANK())
		displayFolder: Orders
		lineageTag: 69286001-d4af-4316-bc1d-20e7ae3e405b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Average gross order value
	/// Excluding VAT
	measure 'ATV Gross Ex Vat' = DIVIDE([Order Value Gross Ex Vat],[Number of Orders],BLANK())
		displayFolder: Orders
		lineageTag: c678f208-e305-4ff1-997e-b5da8a25f094

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Average net order value
	/// Including VAT
	measure 'ATV Net Inc Vat' = DIVIDE([Order Value Net Inc Vat],[Number of Orders],BLANK())
		displayFolder: Orders
		lineageTag: 935be5ed-4ed8-47d6-96b3-433c36ba087e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Sum of total quantity by product variation
	/// By default this includes all product types (also discounts, transport, etc.)
	/// Hence, this measure should often be used together with a filter on product type
	measure 'Number of Ordered Units' =
			CALCULATE(
				[Product Variation Quantity]
			)
		formatString: #,0
		isHidden
		displayFolder: Ordered Units
		lineageTag: ffd7948c-ef03-4234-b6e8-94515eca77eb

	/// Number of ordered units for the same period last year.
	measure 'Number of Ordered Units (PY)' =
			CALCULATE(
				[Number of Ordered Units],
				'Time Intelligence'[Time Calculation] = "PY"
			)
		formatString: #,0
		isHidden
		displayFolder: Ordered Units

	/// Number of ordered units for the same period in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	measure 'Number of Ordered Units (Current Month)' =
			CALCULATE(
				[Number of Ordered Units],
				'Time Intelligence'[Time Calculation] = "Current Month"
			)
		formatString: #,0
		isHidden
		displayFolder: Ordered Units

	/// Relative increase/decrease in number of ordered units from previous year
	measure 'Number of Ordered Units (YOY%)' =
			CALCULATE(
				[Number of Ordered Units],
				'Time Intelligence'[Time Calculation] = "YOY%"
			)
		formatString: 0.00%;-0.00%;0.00%
		isHidden
		displayFolder: Ordered Units

	/// Average basket size, i.e. average number of units per order
	/// By default this includes all product types (also discounts, transport, etc.)
	/// Hence, this measure should often be used together with a filter on product type
	/// Calculated as [Number of Ordered Units] / [Number of Orders]
	measure 'Average Number of Units per Order' =
			DIVIDE(
				[Number of Ordered Units],
				[Number of Orders]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ordered Units

	/// Average Number of Units per Order for the same period last year.
	measure 'Average Number of Units per Order (PY)' =
			CALCULATE(
				[Average Number of Units per Order],
				'Time Intelligence'[Time Calculation] = "PY"
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ordered Units

	/// Average Number of Units per Order for the same period in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	measure 'Average Number of Units per Order (Current Month)' =
			CALCULATE(
				[Average Number of Units per Order],
				'Time Intelligence'[Time Calculation] = "Current Month"
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ordered Units

	/// Sum of value of gift card
	/// Excluding VAT
	measure 'Gift Card Value Ex Vat' =
			CALCULATE(
				[Total Order Value Ex Vat],
				'Order Types'[Order Type] = "Gift Card",
				'Order Measures'[has_finished_order_status] = TRUE()
			)
		isHidden
		displayFolder: Gift Cards
		lineageTag: 871b6c01-d9c2-4f61-a597-80dd7b6d6c3b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Sum of discount value
	/// Excluding VAT
	measure 'Discount Value Ex Vat' =
			CALCULATE(
				[Order Value Net Ex Vat],
				'Order Measures'[order_line_type_name] IN {"DISCOUNT"}
			)
		displayFolder: Discount
		lineageTag: a27fd9f8-407b-49fb-bdee-29f4121fffd5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Number of Order with Discounts
	measure 'Number of Orders With Discounts' =
			CALCULATE(
				[Number of Orders],
				'Order Measures'[order_line_type_name] IN {"DISCOUNT"}
			)
		formatString: #,0
		displayFolder: Discount

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Share of Orders With Discounts
	/// Is currently on a order line level, meaning that it can not be combined with the Product table or Recipes table since 
	/// those are related to other order lines. This can be changed if needed.
	measure 'Share of Orders With Discounts' = DIVIDE([Number of Orders With Discounts], [Number of Orders])
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		displayFolder: Discount

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Sum of Transport value
	/// Excluding VAT
	measure 'Transport Value Ex Vat' =
			CALCULATE(
				[Total Order Value Ex Vat],
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				'Order Measures'[order_line_type_name] IN {"TRANSPORT"}
			)
		displayFolder: Transport
		lineageTag: eb52e954-e781-4d81-b8e0-87f5effaf6ca

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Sum of PRP (credit related to order) value
	/// Excluding VAT
	measure 'Sum PRP Value Ex Vat' =
			CALCULATE(
				[Total Order Value Ex Vat],
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				'Order Measures'[order_line_type_name] IN {"PRP"}
			)
		displayFolder: Credit and PRP
		lineageTag: 7ca94156-13fd-4a37-9c34-0417bc4e5819

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Sum of credit value
	/// Excluding VAT
	measure 'Credit Value Ex Vat' =
			CALCULATE(
				[Total Order Value Ex Vat],
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				'Products'[Product] = "Credits"
			)
		displayFolder: Credit and PRP
		lineageTag: 1fe11954-5b54-4c34-9abb-796297d4ecee

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Number of dishes which the customer replaced with another dish.
	/// NOTE: This measure can only be used on a mealbox level, not in dish level.
	/// If you're interested in information on dishes (such as number of dishes removed with ingredient X),
	/// use the measures for Number of added/removed dishes
	measure 'Number of Swapped Dishes' =

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			        BLANK(),
			        IF(
			            ISFILTERED('Products'),
			            BLANK(),
			            [Number of Removed Dishes] - [Decreased Meals]
			        )
			)
		formatString: #,0
		displayFolder: Swapped Dishes
		lineageTag: 123f1862-185e-49e7-9891-ad2bdd843d29

	/// Number of dishes which the customer replaced a preselector dish with
	/// NOTE: This measure can only be used on a mealbox level, not in dish level.
	/// If you're interested in information on dishes (such as number of dishes removed with ingredient X),
	/// use the measures for Number of added/removed dishes
	measure 'Number of Swapped In Dishes' =

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			        BLANK(),
			        IF(
			            ISFILTERED('Products'),
			            BLANK(),
			            [Number of Added Dishes] - [Increased Meals]
			        )
			)
		formatString: #,0
		isHidden
		displayFolder: Swapped Dishes
		lineageTag: 0a4fb450-86c8-4c98-9071-470e3602a74a

	/// Number of dishes that have been ordered by the customers
	measure 'Number of Ordered Dishes' =
			CALCULATE(
				SUM('Order Measures'[dish_quantity]),
				'Order Measures'[is_dish] = TRUE(),
				'Order Measures'[fk_dim_recipes] <> "0",
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
			    USERELATIONSHIP(
			        'Order Measures'[fk_dim_billing_agreements_subscription],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0
		displayFolder: Recipe Sales
		lineageTag: 486a2e72-e1d4-4b82-ab70-9e235c2450b0

	/// Number of ordered mealboxes.
	/// Sums the product variation quantity for all ordered products that are mealboxes.
	measure 'Number of Ordered Mealboxes' = CALCULATE([Product Variation Quantity], 'Order Measures'[is_mealbox] = TRUE())
		formatString: #,0
		displayFolder: Mealboxes

	/// Number of dishes added by curtomer
	/// Includes all dishes which the customer has selected themselves
	/// which were not in the original weekly menu selected for them.
	measure 'Number of Added Dishes' =
			CALCULATE(
				SUM('Order Measures'[is_added_dish]),
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
			    USERELATIONSHIP(
			        'Order Measures'[fk_dim_billing_agreements_subscription],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0
		displayFolder: Meal Adjustments
		lineageTag: 7919afdd-0322-4085-9960-441805140e39

	/// Number of dishes removed.
	/// Includes all dishes in the original weekly menu which the customer has chosen to remove.
	measure 'Number of Removed Dishes' =
			CALCULATE(
					SUM('Order Measures'[is_removed_dish]),
					'Order Measures'[has_normal_order_type] = TRUE(),
					'Order Measures'[has_finished_order_status] = TRUE(),
					USERELATIONSHIP(
						'Order Measures'[fk_dim_recipes_subscription],
						Recipes[pk_dim_recipes]
					),
					USERELATIONSHIP(
						'Order Measures'[fk_dim_products_subscription],
						Products[pk_dim_products]
					),
				   USERELATIONSHIP(
					   'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
					   'Billing Agreements Deviation'[pk_dim_billing_agreements]
				   ),
				   CROSSFILTER(
					   'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
					   'Customer and Subscriber Details'[pk_dim_billing_agreements],
					   None
				   )
			)
		formatString: #,0
		displayFolder: Meal Adjustments
		lineageTag: cb37e06d-5904-49ec-a217-63c87693121e

	/// Share of dishes in order which the customer replaced with other dishes
	/// NOTE: If a dish is removed but not replaced with another dish, it will not be counted.
	measure 'Share of Swapped Dishes' =
			DIVIDE(
				[Number of Swapped Dishes],
				[Number of Preselected Dishes],
				BLANK()
				)
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		displayFolder: Meal Adjustments
		lineageTag: 729d9abc-e5b6-4544-9d9b-a18928e0fea4

	/// Number of dishes initially presented to customer
	measure 'Number of Preselected Dishes' = ```
			CALCULATE(
				COUNTROWS('Order Measures'),
				'Order Measures'[is_preselected_dish] = TRUE(),
				'Order Measures'[fk_dim_recipes_subscription] <> "0",
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				USERELATIONSHIP(
					'Order Measures'[fk_dim_recipes_subscription],
					Recipes[pk_dim_recipes]
				),
				USERELATIONSHIP(
					'Order Measures'[fk_dim_products_subscription],
					Products[pk_dim_products]),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)

			```
		formatString: #,0
		isHidden
		displayFolder: Swapped Dishes
		lineageTag: a3d84168-264b-4b04-a9d4-7d0a907ff9c4

	/// Number of orders where the customer replaced one or more dishes with another dish
	measure 'Number of Orders with Swaps' = ```

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			        BLANK(),
			        IF(
			            ISFILTERED('Products'),
			            BLANK(),
			            CALCULATE(
			                [Number of Orders],
			                'Order Measures'[has_swap] = True
			            )
			        )
			)
			```
		formatString: #,0
		displayFolder: Swapped Dishes
		lineageTag: 9ec0b504-6ea1-434c-b20f-ab0bbda0e514

	/// Share of orders where the customer replaced one or more dishes with another dish
	measure 'Share of Orders with Swaps' = ```

			DIVIDE(
			    [Number of Orders with Swaps],
			    [Number of Orders] - [Number of Orders with no Preselector],
			    BLANK()
			)
			```
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		displayFolder: Swapped Dishes
		lineageTag: 77799e35-5f8a-4e3d-a9de-01da07f747f5

	/// Number of customers that was not presented with any preselector output
	/// before selecting dishes for the menu week
	measure 'Number of Orders with no Preselector' = ```

			CALCULATE(
			    [Number of Orders],
				'Order Measures'[is_missing_preselector_output] = 1
			)

			```
		formatString: #,0
		isHidden
		displayFolder: Swapped Dishes

	/// Average number of orders where a customer swapped one or more dishes
	measure 'Average Number of Swaps per Order' = ```

			    DIVIDE(
			        [Number of Swapped Dishes],
			        [Number of Orders],
			        BLANK()
			    )
			```
		displayFolder: Swapped Dishes
		lineageTag: 7a742dc2-ed19-4712-92c9-da29eefc46f2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Number of orders where the customer increased the number of portions
	measure 'Number of Orders with Increased Portions' =

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			    BLANK(),
			    IF(
			        ISFILTERED('Products'),
			        BLANK(),
			        CALCULATE(
			            [Number of Orders],
			            'Order Measures'[portion_adjustment_subscription] > 0
			        )
			    )
			)
		formatString: #,0
		displayFolder: Portion Adjustments
		lineageTag: 5e7e9802-6556-4d43-b74b-0701d3278f0a

	/// Number of orders where the customer decreased the number of portions
	measure 'Number of Orders with Decreased Portions' =

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			    BLANK(),
			    IF(
			        ISFILTERED('Products'),
			        BLANK(),
			        CALCULATE(
			            [Number of Orders],
			            'Order Measures'[portion_adjustment_subscription] < 0
			        )
			    )
			)
		formatString: #,0
		displayFolder: Portion Adjustments
		lineageTag: 38061b22-a5c0-44bd-a0ba-095086ce5d51

	/// Number of orders where the customer changed (increased/decreased) the number of portions
	measure 'Number of Orders with Adjusted Portions' =

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			    BLANK(),
			    IF(
			        ISFILTERED('Products'),
			        BLANK(),
			        CALCULATE(
			            [Number of Orders],
			            'Order Measures'[portion_adjustment_subscription] <> 0
			        )
			    )
			)
		formatString: #,0
		displayFolder: Portion Adjustments
		lineageTag: 85934d19-b088-47ba-8245-938d92c6aced

	/// Number of orders where the customer increased the number of meals/days
	measure 'Number of Orders with Increased Meals' =
			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			        BLANK(),
			        IF(
			            ISFILTERED('Products'),
			            BLANK(),
			            CALCULATE(
			                [Number of Orders],
			                'Order Measures'[meal_adjustment_subscription] > 0
			            )
			        )
			)
		formatString: #,0
		displayFolder: Meal Adjustments
		lineageTag: e552ea0e-69a2-414e-9bd0-219e0b09dc5c

	/// Number of orders where the customer decreased the number of meals/days
	measure 'Number of Orders with Decreased Meals' =

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			        BLANK(),
			        IF(
			            ISFILTERED('Products'),
			            BLANK(),
			            CALCULATE(
			                [Number of Orders],
			                'Order Measures'[meal_adjustment_subscription] < 0
			            )
			        )
			)
		formatString: #,0
		displayFolder: Meal Adjustments
		lineageTag: 9491093b-37d6-4667-829a-9b23c9acc654

	/// Number of orders where the customer adjusted (increased/decreased) the number of meals/days
	measure 'Number of Orders with Adjusted Meals' =

			IF(
			    ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			        BLANK(),
			        IF(
			            ISFILTERED('Products'),
			            BLANK(),
			            CALCULATE(
			                [Number of Orders],
			                'Order Measures'[meal_adjustment_subscription] <> 0
			            )
			        )
			)
		formatString: #,0
		displayFolder: Meal Adjustments
		lineageTag: d8c66ffe-9918-408e-a136-7dfb405fb633

	/// Size of dish adjustment
	/// Shows the "net" dish adjustment, meaning the total adjustment made after adding/removing dishes
	/// Example: A customer removes 3 dishes and adds 2 new dishes. The adjustment size is = -1
	measure 'Difference Added vs Removed Dishes' = [Number of Added Dishes] - [Number of Removed Dishes]
		formatString: #,0
		displayFolder: Meal Adjustments
		lineageTag: 1bc0e052-4f0d-4564-8dcc-cefb9ba5604c

	/// Middle step calculation used to find the difference between orderes meals and subscribed meals
	measure 'Meal Adjustments' =

			CALCULATE(
			    IF(
			        ISFILTERED('Recipes')  || ISFILTERED('Ingredients'),
			            BLANK(),
			            IF(
			                ISFILTERED('Products'),
			                BLANK(),
			                CALCULATE(
			    	            SUM('Order Measures'[meal_adjustment_subscription]),
			    	            'Order Measures'[has_normal_order_type] = TRUE(),
			    	            'Order Measures'[has_finished_order_status] = TRUE()
			                )
			            )
			    ),
			    USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0
		isHidden
		displayFolder: Meal Adjustments
		lineageTag: 15fc3c41-f4e7-455c-8502-cfb16f3a92db

	/// Middle step calculation used to find swapped dishes
	measure 'Decreased Meals' =
			CALCULATE(
				[Meal Adjustments],
				'Order Measures'[meal_adjustment_subscription] < 0

			)
		formatString: #,0
		isHidden
		displayFolder: Meal Adjustments
		lineageTag: 72548e83-a743-498b-90e6-d199251b894f

	/// Middle step calculation used to find swapped dishes
	measure 'Increased Meals' =
			CALCULATE(
				[Meal Adjustments],
				'Order Measures'[meal_adjustment_subscription] > 0

			)
		formatString: #,0
		isHidden
		displayFolder: Meal Adjustments
		lineageTag: 721b6dae-e435-404d-b057-75831058d524

	/// Difference between ordered portions and subscribed portions
	measure 'Portion Adjustments' =
			CALCULATE(
				SUM('Order Measures'[portion_adjustment_subscription]),
				'Order Measures'[has_normal_order_type] = TRUE(),
				'Order Measures'[has_finished_order_status] = TRUE(),
				USERELATIONSHIP(
			        'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Billing Agreements Deviation'[pk_dim_billing_agreements]
			    ),
				CROSSFILTER(
					'Bridge Billing Agreements Subscribed Products'[fk_dim_billing_agreements],
			        'Customer and Subscriber Details'[pk_dim_billing_agreements],
					None
				)
			)
		formatString: #,0
		isHidden
		displayFolder: Portion Adjustments
		lineageTag: acb06567-e631-49f7-9d41-40399ca3d51f

	/// Average number of orders per account and week. 
	/// Use it together with the Customer Journey Segments to see the average number of orders per account in each segment.
	/// It will be calculated as the total number of orders in the period, divided by the number of accounts * number of weeks in the period,
	/// meaning that the highest number one can get is 1.0.
	measure 'Average Number of Orders per Account and Week' =
			DIVIDE(
				[Number of Orders],
				COUNTROWS('Fact Billing Agreements')
			)
		formatString: #,0.00
		displayFolder: Order Frequency

	/// Weekly order frequency for accounts same period last year
	measure 'Average Number of Orders per Account and Week (PY)' =
			CALCULATE(
				[Average Number of Orders per Account and Week],
				'Time Intelligence'[Time Calculation]="PY"
			)
		formatString: #,0.00
		displayFolder: Order Frequency

	/// Average number of orders per unique customers placing an order in the selected filtering context (i.e. time, preferences etc.)
	measure 'Average Number of Orders per Customer' =
			DIVIDE(
				[Number of Orders],
				[Number of Customers]
			)
		formatString: #,0.00
		displayFolder: Order Frequency
		lineageTag: 04d72b55-4e5c-458a-b85e-4221d4ed4ef1

	/// Order frequency for customers, same period last year
	measure 'Average Number of Orders per Customer (PY)' =
			CALCULATE(
				[Average Number of Orders per Customer],
				'Time Intelligence'[Time Calculation]="PY"
			)
		formatString: #,0.00
		displayFolder: Order Frequency

	/// Order frequency same period in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	measure 'Average Number of Orders per Customer (Current Month)' =
			CALCULATE(
				[Average Number of Orders per Customer],
				'Time Intelligence'[Time Calculation]="Current Month"
			)
		formatString: #,0.00
		displayFolder: Order Frequency

	/// Number of orders by customers who have had fewer than x orders in the selected period.
	/// x is by default set to 4, but can be changed to any number, using the parameter "(Param) Number of Orders per Customer Target"
	measure 'Number of Orders by Customers with Fewer than X Orders' =
			CALCULATE(
				[Number of Orders],
				FILTER(
					SELECTCOLUMNS('Customer and Subscriber Details',[Agreement Id]),
					[Number of Orders] < '(Param) Number of Orders per Customer Target'[Number of Orders per Customer Target Value]
				)
			)
		formatString: #,0
		isHidden
		displayFolder: Order Frequency

	/// Number of orders by customers who have had x or more orders in the selected period.
	/// x is by default set to 4, but can be changed to any number, using the parameter "(Param) Number of Orders per Customer Target"
	measure 'Number of Orders by Customers with X or More Orders' =
			CALCULATE(
				[Number of Orders],
				FILTER(
					SELECTCOLUMNS('Customer and Subscriber Details',[Agreement Id]),
					[Number of Orders] >= '(Param) Number of Orders per Customer Target'[Number of Orders per Customer Target Value]
				)
			)
		formatString: #,0
		isHidden
		displayFolder: Order Frequency

	/// Order frequency for Customers who have had fewer than x orders in the selected period.
	/// x is by default set to 4, but can be changed to any number, using the parameter "(Param) Number of Orders per Customer Target"
	measure 'Average Number of Orders per Customer with Fewer than X Orders' =
			DIVIDE(
				[Number of Orders by Customers with Fewer than X Orders],
				[Number of Customers with Fewer than X Orders],
				BLANK()
			)
		formatString: #,0.00
		displayFolder: Order Frequency

	/// Order frequency for customers who have had x or more orders in the selected period.
	/// x is by default set to 4, but can be changed to any number, using the parameter "(Param) Number of Orders per Customer Target"
	measure 'Average Number of Orders per Customer with X or More Orders' =
			DIVIDE(
				[Number of Orders by Customers with X or More Orders],
				[Number of Customers with X or More Orders],
				BLANK()
			)
		formatString: #,0.00
		displayFolder: Order Frequency

	/// Number of order that has one or more grocery purchases
	measure 'Number of Orders with Groceries' = CALCULATE([Number of Orders], 'Order Measures'[is_grocery] = TRUE())
		formatString: #,0
		displayFolder: Groceries
		lineageTag: 907b81be-d98c-476b-9b88-c0b53f1d2608

	/// Percentage of orders that contains groceries
	measure 'Share of Orders with Groceries' = DIVIDE([Number of Orders with Groceries],[Number of Orders], BLANK())
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Groceries
		lineageTag: 90ce50c3-d6c7-4a7b-8339-518093f7f186

	/// Number of order that has one or more subscribed groceries
	measure 'Number of Orders with Subscribed Groceries' = 
			CALCULATE(
				[Number of Orders],
				'Order Measures'[is_subscribed_grocery] = TRUE() && 'Order Measures'[is_grocery] = TRUE()
			)
		formatString: #,0
		displayFolder: Groceries

	/// Share of orders that has one or more subscribed groceries
	measure 'Share of Orders with Subscribed Groceries' = DIVIDE([Number of Orders with Subscribed Groceries],[Number of Orders], BLANK())
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Groceries

	/// Share of orders containing groceries where one or more of the groceries was subscribed to.
	/// Divides number of orders with subscribed groceries by number of orders with groceries.
	measure 'Share of Grocery Orders from Subscription' = DIVIDE([Number of Orders with Subscribed Groceries],[Number of Orders with Groceries], BLANK())
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Groceries

	/// Number of ordered groceries.
	/// Sums the product variation quantity for all ordered products that are groceries.
	measure 'Number of Ordered Groceries' = CALCULATE([Product Variation Quantity], 'Order Measures'[is_grocery] = TRUE())
		formatString: #,0
		displayFolder: Groceries

	/// Number of ordered groceries that comes from a grocery subscription.
	/// Sums the product variation quantity for all ordered product variations that are subscribed groceries.
	measure 'Number of Ordered Groceries from Subscription' = 
			CALCULATE(
				[Subscribed Product Variation Quantity], 
				'Order Measures'[is_subscribed_grocery] = TRUE() && 'Order Measures'[is_grocery] = TRUE()
			)
		formatString: #,0
		displayFolder: Groceries

	/// Share of orders containing subscribed groceries
	measure 'Share of Ordered Groceries from Subscription' = DIVIDE([Number of Ordered Groceries from Subscription],[Number of Ordered Groceries], BLANK())
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Groceries

	/// Revenue from groceries
	/// Excluding VAT
	measure 'Grocery Value Ex Vat' = CALCULATE([Order Value Gross Ex Vat], 'Order Measures'[is_grocery] = TRUE())
		formatString: #,0
		displayFolder: Groceries
		lineageTag: ad346d06-f70c-436e-960b-33738cb969e1

	/// Share of gross revenue coming from groceries.
	/// Does not include discount and credit lines.
	measure 'Share of Order Value from Groceries' = DIVIDE([Grocery Value Ex Vat],[Order Value Gross Ex Vat], BLANK())
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Groceries

	/// Average grocery revenue per completed order with groceries
	/// Excluding VAT
	measure 'ATV of Groceries Ex Vat' = DIVIDE([Grocery Value Ex Vat],[Number of Orders with Groceries], BLANK())
		formatString: #,0.00
		displayFolder: Groceries
		lineageTag: 2ff8d559-1016-4fca-be06-7f2951485081

	/// Revenue from subscribed groceries
	/// Excluding VAT
	measure 'Subscribed Grocery Value Ex Vat' = 
			CALCULATE(
				[Subscribed Product Variation Amount Ex Vat], 
				'Order Measures'[is_subscribed_grocery] = TRUE() && 'Order Measures'[is_grocery] = TRUE()
			)
		formatString: #,0
		displayFolder: Groceries

	/// Share of revenue from groceries coming from subscribed products
	measure 'Share of Grocery Value from Subscription' = DIVIDE([Subscribed Grocery Value Ex Vat],[Grocery Value Ex Vat], BLANK())
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Groceries

	/// Average grocery revenue per completed order with subscribed groceries
	/// Excluding VAT
	measure 'ATV of Subscribed Groceries Ex Vat' = DIVIDE([Subscribed Grocery Value Ex Vat],[Number of Orders with Subscribed Groceries], BLANK())
		formatString: #,0.00
		displayFolder: Groceries

	/// Number of orders done by customers who have swapped at least once during the selected period.
	/// To see the definition of a swapping customer, see the measure 'Number of Swapping Customers' in the 'Customer and Subscriber Measures' table.
	/// Not to be confused with 'Number of Orders with Swaps', which is a different measure.
	measure 'Number of Orders by Swapping Customers' =
			CALCULATE(
			    [Number of Orders],
			    FILTER(
			    	SELECTCOLUMNS('Customer and Subscriber Details',[Agreement Id]),
			    	[Number of Orders with Swaps] > 0
			    )
			)
		formatString: #,0
		displayFolder: Swapped Dishes
		lineageTag: 78a09f39-38ac-4d50-ad7e-8393bbe61796

	/// Order frequency for swapping customers, i.e. average number of orders per unique swapping customer.
	/// To see the definition of a swapping customer, see the measure 'Number of Swapping Customers' in the 'Customer and Subscriber Measures' table.
	/// To see the definition of orders by swapping customers, see the measure 'Number of Orders by Swapping Customers' in the 'Order Measures' table.
	measure 'Average Number of Orders per Swapping Customer' =
			DIVIDE(
			    [Number of Orders by Swapping Customers],
			    [Number of Swapping Customers],
			    BLANK()
			)
		formatString: #,0.00
		displayFolder: Swapped Dishes
		lineageTag: bcb63a66-3729-4565-a7e4-3d43cc9e43ee

	/// Sales in the same period of the previous year
	measure 'Number of Orders (PY)' =
			CALCULATE(
				[Number of Orders],
				'Time Intelligence'[Time Calculation]="PY"
			)
		formatString: #,0
		displayFolder: Orders
		lineageTag: 6107c597-37e1-40fb-936d-536e8c6fa315

	/// Sales in the same period of the in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	measure 'Number of Orders (Current Month)' =
			CALCULATE(
				[Number of Orders],
				'Time Intelligence'[Time Calculation]="Current Month"
			)
		formatString: #,0
		displayFolder: Orders

	/// Absolute increase/decrease in sales from previous year
	measure 'Number of Orders (Diff PY)' =
			CALCULATE(
				[Number of Orders],
				'Time Intelligence'[Time Calculation]="Diff PY"
			)
		formatString: #,0
		isHidden
		displayFolder: Orders
		lineageTag: 12a86a97-0cbc-4aa7-a69a-318ce5f87a49

	/// Relative increase/decrease in sales from previous year
	measure 'Number of Orders (YOY%)' =
			CALCULATE(
				[Number of Orders],
				'Time Intelligence'[Time Calculation]="YOY%"
			)
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Orders
		lineageTag: e34487bd-7086-4db7-be56-468ea17a45f3

	/// Number of Orders Year to Date.
	/// Cumulative sum of number of orders from the beginning of the year
	measure 'Number of Orders (YTD)' =
			CALCULATE(
				[Number of Orders],
				'Time Intelligence'[Time Calculation]="YTD"
			)
		formatString: #,0
		displayFolder: Orders

	/// Number of Orders Year to Date for the previous year.
	/// Cumulative sum of number of orders from the beginning of the previous year
	measure 'Number of Orders (PYTD)' =
			CALCULATE(
				[Number of Orders],
				'Time Intelligence'[Time Calculation]="PYTD"
			)
		formatString: #,0
		displayFolder: Orders

	/// Average Transaction Value of orders in the same period of the previous year
	/// only including debit and transportation order lines (i.e. exclude discounts and credit)
	/// exlucding vat
	measure 'ATV Gross Ex Vat (PY)' =
			CALCULATE(
				[ATV Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="PY"
			)
		formatString: #,0.00
		displayFolder: Orders
		lineageTag: 3c4644d8-ad4a-4c09-b41a-fd69e27cf2af

	/// Average Transaction Value of orders in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	/// Only including debit and transportation order lines (i.e. exclude discounts and credit).
	/// Exlucding VAT.
	measure 'ATV Gross Ex Vat (Current Month)' =
			CALCULATE(
				[ATV Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="Current Month"
			)
		formatString: #,0.00
		displayFolder: Orders

	/// Absolute increase/decrease in average transaction value from previous year
	/// only including debit and transportation order lines (i.e. exclude discounts and credit)
	/// exlucding vat
	measure 'ATV Gross Ex Vat (Diff PY)' =
			CALCULATE(
				[ATV Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="Diff PY"
			)
		formatString: #,0.00
		isHidden
		displayFolder: Orders
		lineageTag: 6c08eed4-a32e-4a12-b976-df39ad8546e6

	/// Relative increase/decrease in average transaction value from previous year
	/// only including debit and transportation order lines (i.e. exclude discounts and credit)
	/// exlucding vat
	measure 'ATV Gross Ex Vat (YOY%)' =
			CALCULATE(
				[ATV Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="YOY%"
			)
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Orders
		lineageTag: 17e80dd3-0ead-4ec4-a125-5b0492aace7f

	/// Average Transaction Value of orders in the same period of the previous year
	/// including all order lines (i.e. include discounts and credit)
	/// exlucding vat
	measure 'ATV Net Ex Vat (PY)' =
			CALCULATE(
				[ATV Net Ex Vat],
				'Time Intelligence'[Time Calculation]="PY"
			)
		formatString: #,0.00
		displayFolder: Orders
		lineageTag: b37ae9b9-9d5a-4d00-a8fd-1c2db5d6d3dd


	/// Average Transaction Value of orders in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	/// Including all order lines (i.e. include discounts and credit).
	/// Exlucding VAT.
	measure 'ATV Net Ex Vat (Current Month)' =
			CALCULATE(
				[ATV Net Ex Vat],
				'Time Intelligence'[Time Calculation]="Current Month"
			)
		formatString: #,0.00
		displayFolder: Orders

	/// Absolute increase/decrease in average transaction value from previous year
	/// including all order lines (i.e. include discounts and credit)
	/// exlucding vat
	measure 'ATV Net Ex Vat (Diff PY)' =
			CALCULATE(
				[ATV Net Ex Vat],
				'Time Intelligence'[Time Calculation]="Diff PY"
			)
		formatString: #,0.00
		isHidden
		displayFolder: Orders
		lineageTag: b39c6ac0-af25-41ad-a3c3-7eb7a08652cd

	/// Relative increase/decrease in average transaction value from previous year
	/// including all order lines (i.e. include discounts and credit)
	/// exlucding vat
	measure 'ATV Net Ex Vat (YOY%)' =
			CALCULATE(
				[ATV Net Ex Vat],
				'Time Intelligence'[Time Calculation]="YOY%"
			)
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Orders
		lineageTag: 7dec0ff3-e84b-4dc5-9ae0-41ddb6525a5d

	/// Revenue from orders in the same period of the previous year
	/// only including debit and transportation order lines (i.e. exclude discounts and credit)
	/// exlucding vat
	measure 'Order Value Gross Ex Vat (PY)' =
			CALCULATE(
				[Order Value Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="PY"
			)
		formatString: #,0.00
		displayFolder: Orders
		lineageTag: 81164b9b-6304-4cbd-94d2-eb0f42c1ea0c

	/// Revenue from orders in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	/// Only including debit and transportation order lines (i.e. exclude discounts and credit).
	/// Exlucding VAT.
	measure 'Order Value Gross Ex Vat (Current Month)' =
			CALCULATE(
				[Order Value Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="Current Month"
			)
		formatString: #,0.00
		displayFolder: Orders

	/// Absolute increase/decrease in revenue from orders in the same period previous year
	/// only including debit and transportation order lines (i.e. exclude discounts and credit)
	/// exlucding vat
	measure 'Order Value Gross Ex Vat (Diff PY)' =
			CALCULATE(
				[Order Value Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="Diff PY"
			)
		formatString: #,0.00
		isHidden
		displayFolder: Orders
		lineageTag: 3c78d03b-415c-4815-aaba-e2aba1d33acf

	/// Relative increase/decrease in revenue from orders in the same period previous year
	/// only including debit and transportation order lines (i.e. exclude discounts and credit)
	/// exlucding vat
	measure 'Order Value Gross Ex Vat (YOY%)' =
			CALCULATE(
				[Order Value Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="YOY%"
			)
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Orders
		lineageTag: 23fe5356-77e8-4303-a1bb-eb7e4ee902e7

	/// Revenue from orders Year to Date.
	/// Cumulative sum of revenue from orders from the beginning of the year
	measure 'Order Value Gross Ex Vat (YTD)' =
			CALCULATE(
				[Order Value Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="YTD"
			)
		formatString: #,0
		displayFolder: Orders

	/// Revenue from orders Year to Date for the previous year.
	/// Cumulative sum of revenue from orders from the beginning of the previous year
	measure 'Order Value Gross Ex Vat (PYTD)' =
			CALCULATE(
				[Order Value Gross Ex Vat],
				'Time Intelligence'[Time Calculation]="PYTD"
			)
		formatString: #,0
		displayFolder: Orders

	/// Revenue from orders in the same period of the previous year
	/// including all order lines (i.e. include discounts and credit)
	/// exlucding vat
	measure 'Order Value Net Ex Vat (PY)' =
			CALCULATE(
				[Order Value Net Ex Vat],
				'Time Intelligence'[Time Calculation]="PY"
			)
		formatString: #,0.00
		displayFolder: Orders
		lineageTag: 9d37b5ab-ce84-47ea-a41a-3a9b809d476b

	/// Revenue from orders in the month of todays date.
    /// Need to be filtered on year if its wanted to see numbers for a specific year.
	/// Including all order lines (i.e. include discounts and credit).
	/// Exlucding VAT.
	measure 'Order Value Net Ex Vat (Current Month)' =
			CALCULATE(
				[Order Value Net Ex Vat],
				'Time Intelligence'[Time Calculation]="Current Month"
			)
		formatString: #,0.00
		displayFolder: Orders

	/// Absolute increase/decrease in revenue from orders in the same period
	/// of the previous year from previous year
	/// including all order lines (i.e. include discounts and credit)
	/// exlucding vat
	measure 'Order Value Net Ex Vat (Diff PY)' =
			CALCULATE(
				[Order Value Net Ex Vat],
				'Time Intelligence'[Time Calculation]="Diff PY"
			)
		formatString: #,0.00
		isHidden
		displayFolder: Orders
		lineageTag: 25b6eaae-6b7f-44c5-b043-36376e37e606

	/// Relative increase/decrease in revenue from orders in the same period
	/// including all order lines (i.e. include discounts and credit)
	/// exlucding vat
	measure 'Order Value Net Ex Vat (YOY%)' =
			CALCULATE(
				[Order Value Net Ex Vat],
				'Time Intelligence'[Time Calculation]="YOY%"
			)
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Orders
		lineageTag: 454d5649-146b-4526-b347-dc995c07bcb1

	/// Revenue from orders Year to Date.
	/// Cumulative sum of revenue from orders from the beginning of the year
	measure 'Order Value Net Ex Vat (YTD)' =
			CALCULATE(
				[Order Value Net Ex Vat],
				'Time Intelligence'[Time Calculation]="YTD"
			)
		formatString: #,0
		displayFolder: Orders

	/// Revenue from orders Year to Date for the previous year.
	/// Cumulative sum of revenue from orders from the beginning of the previous year
	measure 'Order Value Net Ex Vat (PYTD)' =
			CALCULATE(
				[Order Value Net Ex Vat],
				'Time Intelligence'[Time Calculation]="PYTD"
			)
		formatString: #,0
		displayFolder: Orders

	/// The percentage of gross revenue coming from an order line type.
	/// E.g., the percentage of gross revenue coming from plus price dishes
	/// thrifty dishes, transportation free or groceries.
	/// Should be used together with the Order Line Details-table.
	measure 'Share of Order Value Gross per Order Line' =
			VAR GrandTotal = CALCULATE(
				[Order Value Gross Ex Vat]
				, REMOVEFILTERS('Order Line Details')
			)

			RETURN
			DIVIDE(
				[Order Value Gross Ex Vat],
				GrandTotal
			)
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: Orders

	/// The number of people eating the delivered dishes, which is calculated as the Number of Orders x Number of Portions of each order.
	/// Example: One 6 portions delivery and one 4 portions delivery will together count as 10 consumers.
	measure 'Number of Consumers' =
			CALCULATE(
				SUM('Order Measures'[portions])
				, 'Order Measures'[is_mealbox] = TRUE()
			)
		formatString: #,0
		displayFolder: Recipe Sales

	/// The number of unique recipe ids (not to be confused with main recipe) ordered in the selected filtering context.
	measure 'Number of Distinct Recipes Ordered' =
			DISTINCTCOUNTNOBLANK('Order Measures'[recipe_id])
		formatString: #,0
		displayFolder: Recipe Sales

	/// The total number of plates served, which is calculated as the sum of Portions x Meals for all orders in the selection.
	/// Example: One delivery with 5 meals and 4 portions per meal will count as 20 servings.
	measure 'Number of Servings' =
			VAR isFilteredOnDish = 
				IF(
					ISFILTERED('Recipes') || 
					ISFILTERED('Ingredients') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Portions') ||
					ISFILTERED('Taxonomies'),
					TRUE(),
					FALSE()
				)
			RETURN
				CALCULATE(
					IF(
						isFilteredOnDish,
						SUM('Order Measures'[dish_servings]),
						SUM('Order Measures'[mealbox_servings])
					),
					'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
				)
		formatString: #,0
		displayFolder: Recipe Sales

	/// The average number of servings per unique recipe id.
	measure 'Average Number of Consumers per Dish' =
			DIVIDE([Number of Servings],[Number of Distinct Recipes Ordered])
		formatString: #,0
		isHidden
		displayFolder: Recipe Sales

	/// The average number of meals in the selected filtering context.
	measure 'Average Number of Meals per Order' =
			DIVIDE([Number of Ordered Dishes],[Number of Orders])
		formatString: #,0.00
		isHidden
		displayFolder: Recipe Sales

	/// The average number of portions in the selected filtering context.
	measure 'Average Number of Portions per Order' =
			DIVIDE([Number of Consumers],[Number of Orders])
		formatString: #,0.00
		isHidden
		displayFolder: Recipe Sales

	/// The planned cost per ordered serving (planned cost/portions*meals).
	/// When used with recipes it shows the average cost of each ordered serving of that recipe.
	/// When used with ingredients it shows the average cost of recipes containing that ingredient.
	/// For example you find the average serving cost of recipes containing cod.
	measure 'Recipe Planned Cost per Ordered Serving' =
			DIVIDE(
				[Recipe Planned Cost from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Recipe Serving

	/// The expected cost per ordered serving (expected cost/portions*meals).
	/// When used with recipes it shows the average cost of each ordered serving of that recipe.
	/// When used with ingredients it shows the average cost of recipes containing that ingredient.
	/// For example you find the average serving cost of recipes containing cod.
	measure 'Recipe Expected Cost per Ordered Serving' =
			DIVIDE(
				[Recipe Expected Cost from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Recipe Serving

	/// The actual cost per ordered serving (actual cost/portions*meals).
	/// When used with recipes it shows the average cost of each ordered serving of that recipe.
	/// When used with ingredients it shows the average cost of recipes containing that ingredient.
	/// For example you find the average serving cost of recipes containing cod.
	measure 'Recipe Actual Cost per Ordered Serving' =
			DIVIDE(
				[Recipe Actual Cost from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe\per Recipe Serving

	/// The planned cost per ordered serving (planned cost/portions*meals).
	/// When used with recipes it shows the average cost of each ordered serving of that recipe.
	/// When used with ingredients it shows only the cost contribution from that ingredient.
	/// For example you find how much the cod cost per serving of the recipes that contain cod.
	measure 'Ingredient Planned Cost per Ordered Serving' =
			DIVIDE(
				[Ingredient Planned Cost from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Recipe Serving

	/// The expected cost per ordered serving (expected cost/portions*meals).
	/// When used with recipes it shows the average cost of each ordered serving of that recipe.
	/// When used with ingredients it shows only the cost contribution from that ingredient.
	/// For example you find how much the cod cost per serving of the recipes that contain cod.
	measure 'Ingredient Expected Cost per Ordered Serving' =
			DIVIDE(
				[Ingredient Expected Cost from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Recipe Serving

	/// The actual cost per ordered serving (actual cost/portions*meals).
	/// When used with recipes it shows the average cost of each ordered serving of that recipe.
	/// When used with ingredients it shows only the cost contribution from that ingredient.
	/// For example you find how much the cod cost per serving of the recipes that contain cod.
	measure 'Ingredient Actual Cost per Ordered Serving' =
			DIVIDE(
				[Ingredient Actual Cost from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient\per Recipe Serving

	/// TODO: Unhide once underlying data is ok
	/// The planned cost per kg of the ingredients in the recipes ordered by the customers.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Planned Cost per kg, from Orders' =
			DIVIDE(
				[Ingredient Planned Cost from Orders],
				[Ingredient Weight in Orders]/1000
			)
		formatString: #,0.0000
		isHidden
		displayFolder: Ingredient Cost\by Ingredient\per kg

	/// TODO: Unhide once underlying data is ok
	/// The expected cost per kg of the ingredients in the recipes ordered by the customers.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Expected Cost per kg, from Orders' =
			DIVIDE(
				[Ingredient Expected Cost from Orders],
				[Ingredient Weight in Orders]/1000
			)
		formatString: #,0.0000
		isHidden
		displayFolder: Ingredient Cost\by Ingredient\per kg

	/// TODO: Unhide once underlying data is ok
	/// The actual cost per kg of the ingredients in the recipes ordered by the customers.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	measure 'Ingredient Actual Cost per kg, from Orders' =
			DIVIDE(
				[Ingredient Actual Cost from Orders],
				[Ingredient Weight in Orders]/1000
			)
		formatString: #,0.0000
		isHidden
		displayFolder: Ingredient Cost\by Ingredient\per kg

	/// The CO2 emissions (in kg) per ordered serving (planned cost/portions*meals).
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// When used with recipes it shows the average emission from each ordered serving of that recipe.
	/// When used with ingredients it shows the average emission of recipes containing that ingredient.
	/// For example you find the average serving emission of recipes containing cod.
	/// If you want to emission contribution from specific ingredients per serving, use [Ingredient CO2 Emissions per Ordered Serving].
	measure 'Recipe CO2 Emissions per Ordered Serving' =
			DIVIDE(
				[Recipe CO2 Emission from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Recipe

	/// The CO2 emissions (in kg) per ordered serving (planned cost/portions*meals).
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// When used with recipes it shows the average emission of each ordered serving of that recipe.
	/// When used with ingredients it shows only the emission contribution from that ingredient.
	/// For example you find how much the cod contributes to CO2 emissions per serving of the recipes that contain cod.
	/// If you want to see the CO2 emission of all ingredients in the recipes that include any of the selected ingredients, use [Recipe CO2 Emissions per Ordered Serving].
	measure 'Ingredient CO2 Emissions per Ordered Serving' =
			DIVIDE(
				[Ingredient CO2 Emission from Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Ingredient

	/// The sum of the planned recipe cost of the recipes ordered by the customers.
	/// It is the cost used in menu planning, and calculated using the exact quantity of all included ingredients.
	/// When used with recipes it shows the cost coming from those recipes.
	/// When used with ingredients it shows the the cost of the recipes containing that ingredient.
	/// For example you find the cost of recipes containing cod.
	/// Use [Ingredient Planned Cost from Orders] to see the cost contribution from the specific ingredients in the recipes.
	measure 'Recipe Planned Cost from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_planned_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the planned recipe cost of the recipes ordered by the customers.
	/// It is the cost used in menu planning, and calculated using quantity of all included ingredients, 
	/// where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// When used with recipes it shows the cost coming from those recipes.
	/// When used with ingredients it shows the the cost of the recipes containing that ingredient.
	/// For example you find the cost of recipes containing cod.
	/// Use [Ingredient Planned Cost Whole Units from Orders] to see the cost contribution from the specific ingredients in the recipes.
	measure 'Recipe Planned Cost Whole Units from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_planned_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the expected recipe cost of the recipes ordered by the customers.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// This measure is calculated using the exact quantity of all included ingredients.
	/// When used with recipes it shows the cost coming from those recipes.
	/// When used with ingredients it shows the the cost of the recipes containing that ingredient.
	/// For example you find the cost of recipes containing cod.
	/// Use [Ingredient Expected Cost from Orders] to see the cost contribution from the specific ingredients in the recipes.
	measure 'Recipe Expected Cost from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_expected_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the expected recipe cost of the recipes ordered by the customers.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// This measure is calculated using quantity of all included ingredients, 
	/// where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// When used with recipes it shows the cost coming from those recipes.
	/// When used with ingredients it shows the the cost of the recipes containing that ingredient.
	/// For example you find the cost of recipes containing cod.
	/// Use [Ingredient Expected Cost Whole Units from Orders] to see the cost contribution from the specific ingredients in the recipes.
	measure 'Recipe Expected Cost Whole Units from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_expected_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the actual recipe cost of the recipes ordered by the customers.
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// This measure is calculated using the exact quantity of all included ingredients.
	/// When used with recipes it shows the cost coming from those recipes.
	/// When used with ingredients it shows the the cost of the recipes containing that ingredient.
	/// For example you find the cost of recipes containing cod.
	/// Use [Ingredient Actual Cost from Orders] to see the cost contribution from the specific ingredients in the recipes.
	measure 'Recipe Actual Cost from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_actual_cost]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe

	/// The sum of the actual recipe cost of the recipes ordered by the customers.
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// This measure is calculated using quantity of all included ingredients, 
	/// where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// When used with recipes it shows the cost coming from those recipes.
	/// When used with ingredients it shows the the cost of the recipes containing that ingredient.
	/// For example you find the cost of recipes containing cod.
	/// Use [Ingredient Actual Cost Whole Units from Orders] to see the cost contribution from the specific ingredients in the recipes.
	measure 'Recipe Actual Cost Whole Units from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_actual_cost_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Recipe

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the ordered recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return the emission of all recipes that include any of those ingredients, and not only the emission of the selected ingredients.
	/// Use [Ingredient CO2 Emission from Orders] to see the emission of specific ingredients in the recipes.
	measure 'Recipe CO2 Emission from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_co2_emissions]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Recipe

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the ordered recipes, where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return the emission of all recipes that include any of those ingredients, and not only the emission of the selected ingredients.
	/// Use [Ingredient CO2 Emission Whole Units from Orders] to see the emission of specific ingredients in the recipes.
	measure 'Recipe CO2 Emission Whole Units from Orders' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_co2_emissions_whole_units]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Recipe

	/// Hidden measure?
	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data.
	measure 'Recipe Weight with CO2 Data from Ordered Recipes' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_weight_with_co2_data]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// TODO: Unhide once underlying data is ok
	/// The CO2 emissions in kg per kg of ingredients in the ordered recipes.
	/// It is calculated by dividing the total CO2 emissions from all ingredients in the recipes by the total net weight of all ingredients in the recipes that have registered CO2 emission data.
	/// If filtered on specific ingredients, it will do this calculations using all ingredients in the recipes that include any of those ingredients, and not only the ingredients selected.
	measure 'Recipe CO2 Emission per kg, from Orders' =
			DIVIDE(
				[Recipe CO2 Emission from Orders],
				[Recipe Weight with CO2 Data from Ordered Recipes]/1000
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// NB! Before unhiding this we should use Number of Preselected Servings in the denominator.
	/// The planned cost per preselected serving.
	/// See [Number of Preselected Servings] for the definition of servings.
	/// When filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of those ingredients in the calculation, and not only the cost of the selected ingredients.
	measure 'Planned Cost per Preselected Serving' =
			DIVIDE(
				[Recipe Planned Cost from Preselected Menu],
				[Number of Servings]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... per Preselected Recipe Serving

	/// NB! Before unhiding this we should use Number of Preselected Servings in the denominator.
	/// The expected cost per preselected serving.
	/// See [Number of Preselected Servings] for the definition of servings.
	/// When filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of those ingredients in the calculation, and not only the cost of the selected ingredients.
	measure 'Expected Cost per Preselected Serving' =
			DIVIDE(
				[Recipe Expected Cost from Preselected Menu],
				[Number of Servings]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... per Preselected Recipe Serving

	/// NB! Before unhiding this we should use Number of Preselected Servings in the denominator.
	/// The actual cost per preselected serving.
	/// See [Number of Preselected Servings] for the definition of servings.
	/// When filtered on specific ingredients, it will use the cost of all ingredients in the recipes that include any of those ingredients in the calculation, and not only the cost of the selected ingredients.
	measure 'Actual Cost per Preselected Serving' =
			DIVIDE(
				[Recipe Actual Cost from Preselected Menu],
				[Number of Servings]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... per Preselected Recipe Serving

	/// NB! Before unhiding this we should use Number of Preselected Servings in the denominator.
	/// The CO2 emissions (in kg) per preselected serving.
	/// See [Number of Preselected Servings] for the definition of servings.
	/// When filtered on specific ingredients, it will use the emissions of all ingredients in the recipes that include any of those ingredients in the calculation, and not only the emissions of the selected ingredients.
	measure 'CO2 Emissions per Preselected Serving' =
			DIVIDE(
				[Recipe CO2 Emission from Preselected Menu],
				[Number of Servings]
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\per Recipe Serving

	/// The sum of the planned recipe cost if the customer would have taken the preselected recipes.
	/// It is the cost used in menu planning, and calculated using the exact quantity of all included ingredients.
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of those ingredients.
	measure 'Recipe Planned Cost from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_planned_cost_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... for Whole Preselected Recipes

	/// The sum of the planned recipe cost if the customer would have taken the preselected recipes.
	/// It is the cost used in menu planning, and calculated using quantity of all included ingredients, 
	/// where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of those ingredients.
	measure 'Recipe Planned Cost Whole Units from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_planned_cost_whole_units_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... for Whole Preselected Recipes

	/// The sum of the expected recipe cost if the customer would have taken the preselected recipes.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// This measure is calculated using the exact quantity of all included ingredients.
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of those ingredients.
	measure 'Recipe Expected Cost from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_expected_cost_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... for Whole Preselected Recipes

	/// The sum of the expected recipe cost if the customer would have taken the preselected recipes.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// This measure is calculated using quantity of all included ingredients, 
	/// where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of those ingredients.
	measure 'Recipe Expected Cost Whole Units from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_expected_cost_whole_units_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... for Whole Preselected Recipes

	/// The sum of the actual recipe cost if the customer would have taken the preselected recipes.
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// This measure is calculated using the exact quantity of all included ingredients.
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of those ingredients.
	measure 'Recipe Actual Cost from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_actual_cost_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... for Whole Preselected Recipes

	/// The sum of the actual recipe cost if the customer would have taken the preselected recipes.
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// This measure is calculated using quantity of all included ingredients, 
	/// where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// If filtered on specific ingredients, it will return the cost of all ingredients in the recipes that include any of those ingredients.
	measure 'Recipe Actual Cost Whole Units from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_actual_cost_whole_units_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Cost\... for Whole Preselected Recipes

	/// The total amount of registered co2 emissions (in kg) for the ingredients if the customer would have taken the preselected recipes.
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredients in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return the emission of all recipes that include any of those ingredients.
	measure 'Recipe CO2 Emission from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_co2_emissions_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// The total amount of registered co2 emissions (in kg) for the ingredients if the customer would have taken the preselected recipes, 
	/// where the ingredient quantity is rounded up to the nearest integer (i.e. whole units).
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return the emission of all recipes that include any of those ingredients.
	measure 'Recipe CO2 Emission Whole Units from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_co2_emissions_whole_units_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// Hidden measure?
	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data, if the customer would have taken the preselected recipes.
	measure 'Ingredient Weight with CO2 Data from Preselected Menu' =
			CALCULATE(
				SUM('Order Measures'[total_ingredient_weight_with_co2_data_subscription]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// The CO2 emissions in kg per kg of ingredients if the customer would have taken the preselected recipes.
	/// It is calculated by dividing the total CO2 emissions from the ingredients in the recipes by the total net weight of the ingredients in the recipes that have registered CO2 emission data.
	/// If filtered on specific ingredients, it will do this calculations for all recipes that include any of those ingredients.
	measure 'Ingredient CO2 Emissions per kg, from Preselected Menu' =
			DIVIDE(
				[Recipe CO2 Emission from Preselected Menu],
				[Ingredient Weight with CO2 Data from Preselected Menu]/1000,
				0
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Recipe

	/// The sum of the planned ingredient cost of the ingredients in the recipes ordered by the customers.
	/// It is the cost used in menu planning, and calculated using the exact quantity of all included ingredients.
	/// If filtered on specific ingredients, it will return only the cost coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data. 
	/// If you want to see the cost of all ingredients in the recipes that include any of the filtered ingredients (e.g. the cost of all ingredients in recipes that include chicken), 
	/// use [Recipe Planned Cost from Orders] instead. The [Recipe Planned Cost from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient Planned Cost from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_planned_cost]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe Planned Cost from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient

	/// The sum of the planned ingredient cost of the ingredients in the recipes ordered by the customers, using whole units for ingredient quantities per recipe.
	/// If filtered on specific ingredients, it will return only the cost coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data. 
	/// If you want to see the cost of all ingredients in the recipes that include any of the filtered ingredients (e.g. the cost of all ingredients in recipes that include chicken), 
	/// use [Recipe Planned Cost Whole Units from Orders] instead. The [Recipe Planned Cost Whole Units from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient Planned Cost Whole Units from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_planned_cost_whole_units]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe Planned Cost Whole Units from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient

	/// The sum of the expected ingredient cost of the ingredients in the recipes ordered by the customers.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will return only the cost coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data. 
	/// If you want to see the cost of all ingredients in the recipes that include any of the filtered ingredients (e.g. the cost of all ingredients in recipes that include chicken), 
	/// use [Recipe expected Cost from Orders] instead. The [Recipe expected Cost from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient Expected Cost from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_expected_cost]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe Expected Cost from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient

	/// The sum of the expected ingredient cost of the ingredients in the recipes ordered by the customers, using whole units for ingredient quantities per recipe.
	/// The expected cost might have a discount that is not to be included in the menu planning process.
	/// If filtered on specific ingredients, it will return only the cost coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data. 
	/// If you want to see the cost of all ingredients in the recipes that include any of the filtered ingredients (e.g. the cost of all ingredients in recipes that include chicken), 
	/// use [Recipe expected Cost Whole Units from Orders] instead. The [Recipe expected Cost Whole Units from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient Expected Cost Whole Units from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_expected_cost_whole_units]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe Expected Cost Whole Units from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient

	/// The sum of the actual ingredient cost of the ingredients in the recipes ordered by the customers.
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// If filtered on specific ingredients, it will return only the cost coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	/// If you want to see the cost of all ingredients in the recipes that include any of the filtered ingredients (e.g. the cost of all ingredients in recipes that include chicken),
	/// use [Recipe actual Cost from Orders] instead. The [Recipe actual Cost from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient Actual Cost from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_actual_cost]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe Actual Cost from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient

	/// The sum of the actual ingredient cost of the ingredients in the recipes ordered by the customers, using whole units for ingredient quantities per recipe.
	/// The actual cost is fetched from the purchasing order(s) for the menu week of the recipe.
	/// If filtered on specific ingredients, it will return only the cost coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	/// If you want to see the cost of all ingredients in the recipes that include any of the filtered ingredients (e.g. the cost of all ingredients in recipes that include chicken),
	/// use [Recipe actual Cost Whole Units from Orders] instead. The [Recipe actual Cost Whole Units from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient Actual Cost Whole Units from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_actual_cost_whole_units]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe Actual Cost Whole Units from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: Ingredient Cost\by Ingredient

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes ordered by the customers. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return only the emission coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	/// If you want to see the emission of all ingredients in the recipes that include any of the filtered ingredients (e.g. the emission of all ingredients in recipes that include chicken),
	/// use [Recipe CO2 Emission from Orders] instead. The [Recipe CO2 Emission from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient CO2 Emission from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_co2_emissions]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe CO2 Emission from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Ingredient

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes ordered by the customers, where the ingredient quantity is rounded up to whole units per recipe
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data, so the actual CO2 emission may be higher than this measure indicates.
	/// If filtered on specific ingredients, it will return only the emission coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	/// If you want to see the emission of all ingredients in the recipes that include any of the filtered ingredients (e.g. the emission of all ingredients in recipes that include chicken),
	/// use [Recipe CO2 Emission Whole Units from Orders] instead. The [Recipe CO2 Emission Whole Units from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient CO2 Emission Whole Units from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_co2_emissions_whole_units]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					[Recipe CO2 Emission Whole Units from Orders]
				)
			)
		formatString: #,0.00
		displayFolder: CO2 Emissions\by Ingredient

	/// Hidden measure?
	/// The total net weight (in grams) of ordered ingredients that have registered CO2 emission data.
	measure 'Ingredient Weight with CO2 Data from Orders' =
			CALCULATE(
				SUM('Recipe Ingredients'[customer_ordered_ingredient_weight_with_co2_data]),
				'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Ingredient

	/// TODO: Unhide once underlying data is ok
	/// The CO2 emissions in kg per kg of ingredients in the ordered recipes.
	/// It is calculated by dividing the total CO2 emissions from the ingredients in the ordered recipes by the net weight of the ingredients that have registered CO2 emission data.
	/// If filtered on specific ingredients, it will do this calculations for all recipes that include any of those ingredients.
	/// If filtered on specific ingredients, it will do this calculations only for the ingredients included in the filter.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	/// If you want to see the emission per kg of all ingredients in the recipes that include any of the filtered ingredients (e.g. the emission per kg of all ingredients in recipes that include chicken),
	/// use [Recipe CO2 Emission per kg, from Orders] instead. The [Recipe CO2 Emission per kg, from Orders] measure will also work when filtered on customer attributes.
	measure 'Ingredient CO2 Emission per kg, from Orders' =
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					DIVIDE(
						[Ingredient CO2 Emission from Orders],
						CALCULATE(
							SUM('Recipe Ingredients'[customer_ordered_ingredient_weight_with_co2_data])/1000,
							'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
						)
					),
					[Recipe CO2 Emission per kg, from Orders]
				)
			)
		formatString: #,0.00
		isHidden
		displayFolder: CO2 Emissions\by Ingredient

	/// TODO: Unhide once underlying data is ok
	/// The weight of the ingredients (in grams) in the recipes ordered by the customers.
	/// If filtered on specific ingredients, it will return only the weight coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	measure 'Ingredient Weight in Orders' = 
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_weight]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					CALCULATE(
						SUM('Order Measures'[total_ingredient_weight]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					)
				)
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// TODO: Unhide once underlying data is ok
	/// The weight of the ingredients (in grams) in the recipes ordered by the customers, using whole units for ingredient quantities per recipe.
	/// If filtered on specific ingredients, it will return only the weight coming from those ingredients.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	measure 'Ingredient Weight Whole Units in Orders' = 
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			VAR IsFilteredOnIngredients =
				IF(
					ISFILTERED('Ingredients'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes && IsFilteredOnIngredients,
				BLANK(),
				IF(
					IsFilteredOnIngredients,
					CALCULATE(
						SUM('Recipe Ingredients'[customer_ordered_ingredient_weight_whole_units]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					),
					CALCULATE(
						SUM('Order Measures'[total_ingredient_weight_whole_units]),
						'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
					)
				)
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// TODO: Unhide once underlying data is ok
	/// The weight (in grams)of the ingredients per recipe serving ordered by the customers.
	/// See [Number of Servings] for the definition of servings.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	measure 'Ingredient Weight per Ordered Serving' = 
			DIVIDE(
				[Ingredient Weight in Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// TODO: Unhide once underlying data is ok
	/// The weight of the ingredients in grams (with the quantity in whole units per recipe), divided by number of ordered recipe serving.
	/// See [Number of Servings] for the definition of servings.
	/// When filtering on ingredients, only the contribution from the selected ingredients will be included in the calculation.
	/// If filtered on customer attributes (like preferences, status, segments etc.) as well as on specific ingredients,
	/// it will return blank as we don't have that level of detail in the data.
	measure 'Ingredient Weight Whole Units per Ordered Serving' = 
			DIVIDE(
				[Ingredient Weight Whole Units in Orders],
				[Number of Servings]
			)
		formatString: #,0.00
		isHidden
		displayFolder: Ingredient Amount

	/// The ingredient quantity ordered by the customers.
	/// If filtered on specific ingredients, it will return the amount of those ingredients that are ordered by the customers as a part of the recipes.
	/// If filtered on customer attributes (like preferences, status, segments etc.), it will return blank as we don't have that level of detail in the data.
	measure 'Ingredient Quantity in Orders' = 
			VAR IsFilteredOnCustomerAttributes =
				IF(
					ISFILTERED('Customer and Subscriber Details') ||
					ISFILTERED('Customer Journey Segments') ||
					ISFILTERED('Order Line Details') ||
					ISFILTERED('Order Types') ||
					ISFILTERED('Preference Combinations') ||
					ISFILTERED('Preferences') ||
					ISFILTERED('Subscribed Products'),
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnCustomerAttributes,
				BLANK(),
				CALCULATE(
					SUM('Recipe Ingredients'[customer_ordered_ingredient_quantity]),
					'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
				)
			)
		formatString: #,0.00
		displayFolder: Ingredient Amount

	/// Margin calculated as [Order Value Gross Ex Vat]-[Recipe Actual Cost Whole Units from Orders], 
	/// As we only have cost on recipes as of now, it will only consider Mealboxes and Velg&vrak products.
	/// When filtered on specific recipes, ingredients or order line details, it will return blank as the Order Value is placed on Mealbox and not on the recipes.
	measure 'Order Contribution Margin' =
			// As long as we don't have cost on other than recipes, we can only calculate contribution margin for Mealboxes and Velg&vrak.
			VAR IsFilteredOnSingleRecipes =
				IF(
					ISFILTERED('Recipes') ||
					ISFILTERED('Ingredients') ||
					ISFILTERED('Order Line Details') ,
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnSingleRecipes,
				BLANK(),
				CALCULATE(
					[Order Value Gross Ex Vat]-[Recipe Actual Cost Whole Units from Orders],
					'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
				)
			)
		formatString: #,0.00
		displayFolder: Margins

	/// NB! Need to keep this hidden since we don't have correct gross amount on all preselected menus, e.g. billing_agreement_order_id = 846DD433-8CA3-4D9B-8E1E-CF884246A1E1'
	/// Margin if the customer had bought the preselected menu calculated as [Order Value Gross Ex Vat]-[Recipe Actual Cost Whole Units from Preselected Menu], 
	/// where the order value is ignoring any extra cost on premium/thrify dishes.
	/// As we only have cost on recipes as of now, it will only consider Mealboxes and Velg&vrak products.
	measure 'Preselection Order Contribution Margin' =
			// As long as we don't have cost on other than recipes, we can only calculate contribution margin for Mealboxes and Velg&vrak.
			CALCULATE(
				[Subscribed Product Variation Amount Ex Vat]-[Recipe Actual Cost Whole Units from Preselected Menu],
				 'Subscribed Products'[Subscribed Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00
		isHidden
		displayFolder: Margins

	/// Margin percentage calculated as ([Order Value Gross Ex Vat]-[Recipe Actual Cost Whole Units from Orders])/[Order Value Gross Ex Vat], 
	/// As we only have cost on recipes as of now, it will only consider Mealboxes and Velg&vrak products.
	/// When filtered on specific recipes, ingredients or order line details, it will return blank as the Order Value is placed on Mealbox and not on the recipes.
	measure 'Order Contribution Margin %' = 
			VAR IsFilteredOnSingleRecipes =
				IF(
					ISFILTERED('Recipes') ||
					ISFILTERED('Ingredients') ||
					ISFILTERED('Order Line Details') ,
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnSingleRecipes,
				BLANK(),
				CALCULATE(
					DIVIDE(
						[Order Value Gross Ex Vat]-[Recipe Actual Cost Whole Units from Orders],
						[Order Value Gross Ex Vat]
					),
					'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
				)
			)
		formatString: #,0.00%
		displayFolder: Margins

	/// NB! Need to keep this hidden since we don't have correct gross amount on all preselected menus, e.g. billing_agreement_order_id = 846DD433-8CA3-4D9B-8E1E-CF884246A1E1'
	/// Margin percentage if the customer had bought the preselected menu, calculated as ([Order Value Gross Ex Vat]-[Recipe Actual Cost Whole Units from Preselected Menu])/[Order Value Gross Ex Vat], 
	/// where the order value is ignoring any extra cost on premium/thrify dishes.
	/// As we only have cost on recipes as of now, it will only consider Mealboxes and Velg&vrak products.
	measure 'Preselection Order Contribution Margin %' =
			CALCULATE(
				DIVIDE(
					[Subscribed Product Variation Amount Ex Vat]-[Recipe Actual Cost Whole Units from Preselected Menu],
					[Subscribed Product Variation Amount Ex Vat]
				),
				 'Subscribed Products'[Subscribed Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00%
		isHidden
		displayFolder: Margins

	/// Margin percentage same period last year. 
	measure 'Order Contribution Margin % PY' = 
			CALCULATE(
				[Order Contribution Margin %],
				'Time Intelligence'[Time Calculation] = "PY"
			)
		formatString: #,0.00%
		displayFolder: Margins

	/// NB! Need to keep this hidden since we don't have correct gross amount on all preselected menus, e.g. billing_agreement_order_id = 846DD433-8CA3-4D9B-8E1E-CF884246A1E1'
	/// Margin percentage if the customer had bought the preselected menu, same period last year. 
	measure 'Preselection Order Contribution Margin % PY' = 
			CALCULATE(
				[Preselection Order Contribution Margin %],
				'Time Intelligence'[Time Calculation] = "PY"
			)
		formatString: #,0.00%
		isHidden
		displayFolder: Margins

	/// Ingredient cost share of order value, calculated as [Recipe Actual Cost Whole Units from Orders]/[Order Value Gross Ex Vat].
	/// As we only have cost on recipes as of now, it will only consider Mealboxes and Velg&vrak products.
	/// When filtered on specific recipes, ingredients or order line details, it will return blank as the Order Value is placed on Mealbox and not on the recipes.
	measure 'Ingredient Cost Share of Order Value' =
			VAR IsFilteredOnSingleRecipes =
				IF(
					ISFILTERED('Recipes') ||
					ISFILTERED('Ingredients') ||
					ISFILTERED('Order Line Details') ,
					TRUE(),
					FALSE()
				)

			RETURN
			IF(
				IsFilteredOnSingleRecipes,
				BLANK(),
				CALCULATE(
					DIVIDE(
						[Recipe Actual Cost Whole Units from Orders],
						[Order Value Gross Ex Vat]
					),
					'Products'[Product Type] IN {"Mealbox", "Velg&vrak"}
				)
			)
		formatString: #,0.00%
		displayFolder: Margins

	/// NB! Need to keep this hidden since we don't have correct gross amount on all preselected menus, e.g. billing_agreement_order_id = 846DD433-8CA3-4D9B-8E1E-CF884246A1E1'
	/// Ingredient cost share of order value if the customer had bought the preselected menu.
	/// This is calculated as [Recipe Actual Cost Whole Units from Preselected Menu]/[Order Value Gross Ex Vat],
	/// where the order value is ignoring any extra cost on premium/thrify dishes.
	/// As we only have cost on recipes as of now, it will only consider Mealboxes and Velg&vrak products.
	measure 'Preselection Ingredient Cost Share of Order Value' =
			CALCULATE(
				DIVIDE(
					[Recipe Actual Cost Whole Units from Preselected Menu],
					[Subscribed Product Variation Amount Ex Vat]
				),
				 'Subscribed Products'[Subscribed Product Type] IN {"Mealbox", "Velg&vrak"}
			)
		formatString: #,0.00%
		isHidden
		displayFolder: Margins

	/// The cost share of the selected ingredients within the recipes that contain them.
	/// It is calculated as [Ingredient Actual Cost Whole Units from Orders]/[Recipe Actual Cost Whole Units from Orders].
	measure 'Ingredient Actual Cost Whole Units Share of Whole Recipes from Orders' = 
			DIVIDE(
				[Ingredient Actual Cost Whole Units from Orders],
				[Recipe Actual Cost Whole Units from Orders]
			)
		formatString: #,0.00%
		displayFolder: Ingredient Cost\by Ingredient\Share of Recipes

	/// The cost share of the selected ingredients within the recipes that contain them.
	/// It is calculated as [Ingredient Planned Cost Whole Units from Orders]/[Recipe Planned Cost Whole Units from Orders].
	measure 'Ingredient Planned Cost Whole Units Share of Whole Recipes from Orders' = 
			DIVIDE(
				[Ingredient Planned Cost Whole Units from Orders],
				[Recipe Planned Cost Whole Units from Orders]
			)
		formatString: #,0.00%
		displayFolder: Ingredient Cost\by Ingredient\Share of Recipes

	/// The cost share of the selected ingredients within the recipes that contain them.
	/// It is calculated as [Ingredient Expected Cost Whole Units from Orders]/[Recipe Expected Cost Whole Units from Orders].
	measure 'Ingredient Expected Cost Whole Units Share of Whole Recipes from Orders' = 
			DIVIDE(
				[Ingredient Expected Cost Whole Units from Orders],
				[Recipe Expected Cost Whole Units from Orders]
			)
		formatString: #,0.00%
		displayFolder: Ingredient Cost\by Ingredient\Share of Recipes

	/// The emission share of the selected ingredients within the recipes that contain them.
	/// It is calculated as [Ingredient CO2 Emission from Orders]/[Recipe CO2 Emission from Orders].
	measure 'Ingredient CO2 Emission Share of Whole Recipes from Orders' = 
			DIVIDE(
				[Ingredient CO2 Emission from Orders],
				[Recipe CO2 Emission from Orders]
			)
		formatString: #,0.00%
		displayFolder: CO2 Emissions\by Ingredient

	/// The unique identifier of a user that have signed up for our service
	column billing_agreement_id
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 84439a3d-2be2-48be-964d-7db562b16e3e
		summarizeBy: sum
		sourceColumn: billing_agreement_id

		annotation SummarizationSetBy = Automatic

	/// A description of what kind of order line it its. Fore example debit, credit, discount, transport etc.
	/// Used to filter measure on which order lines to include.
	column order_line_type_name
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 6093c33b-13e6-4718-84fa-0caeafa121df
		summarizeBy: none
		sourceColumn: order_line_type_name

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// The unit price of the product variation ex vat.
	column unit_price_ex_vat
		dataType: double
		isHidden
		isAvailableInMdx: false
		lineageTag: 7f9d2ac1-3639-4135-b1dd-80415012e217
		summarizeBy: sum
		sourceColumn: unit_price_ex_vat

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// The unit price of the product variation ex vat.
	column unit_price_inc_vat
		dataType: double
		isHidden
		isAvailableInMdx: false
		lineageTag: 97dc1a98-b450-4c70-b648-52f8b8697a06
		summarizeBy: sum
		sourceColumn: unit_price_inc_vat

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// The total amount of the order line ex vat. 
	/// I.e., the unit price ex vat multiplied with the quantity ordered of the variation.
	column total_amount_ex_vat
		dataType: double
		isHidden
		isAvailableInMdx: false
		lineageTag: 08f563d8-4a6b-42f1-a6a2-defc5b017a7f
		summarizeBy: sum
		sourceColumn: total_amount_ex_vat

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// The total amount of the order line inc vat. 
	/// I.e., the unit price inc vat multiplied with the quantity ordered of the variation.
	column total_amount_inc_vat
		dataType: double
		isHidden
		isAvailableInMdx: false
		lineageTag: 7d29bced-8264-4b7b-ad97-48e24fed616a
		summarizeBy: sum
		sourceColumn: total_amount_inc_vat

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// Flag to indiacte if the order has printed recipes. 
	/// The option to only have digital recipes was introduced in February 2024. 
	/// Customers has to opt out on the webpage to only recieve digital recipes.
	column has_recipe_leaflets
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		lineageTag: ae54f7b9-96c6-45c6-8350-728a3cb4e046
		summarizeBy: none
		sourceColumn: has_recipe_leaflets

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_order_types
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 5433926e-8415-406d-bcf6-50d345c90dc2
		summarizeBy: none
		sourceColumn: fk_dim_order_types

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_products
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 272a1795-5763-4cfd-9ac3-330f7a344bf8
		summarizeBy: none
		sourceColumn: fk_dim_products

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_billing_agreements_ordergen
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 0becfd8d-060a-46cc-8f99-831e7bb3c105
		summarizeBy: none
		sourceColumn: fk_dim_billing_agreements_ordergen

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_companies
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 791ace8d-5c19-4331-ae91-56c97085cfc2
		summarizeBy: none
		sourceColumn: fk_dim_companies

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_date
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 3f4a1497-0525-4d8c-8938-ad437ac4ef2c
		summarizeBy: none
		sourceColumn: fk_dim_date

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// The unique identifier of an order. An order can have several order lines.
	column billing_agreement_order_id
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 70d325d5-6b5b-4424-b033-e2139b7ba9d6
		summarizeBy: none
		sourceColumn: billing_agreement_order_id

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// The ordered quantity of the product variation.
	column product_variation_quantity
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: b613ba0a-475c-451f-bff3-3cfd47ff7e11
		summarizeBy: sum
		sourceColumn: product_variation_quantity

		annotation SummarizationSetBy = Automatic

	/// The quantity of ordered dishes
	column dish_quantity
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		summarizeBy: sum
		sourceColumn: dish_quantity

	/// The timestamp of when the order was created in the CMS system
	column source_created_at
		dataType: dateTime
		isHidden
		formatString: General Date
		isAvailableInMdx: false
		lineageTag: e99eabef-0f79-4460-9922-2e36345a8b12
		summarizeBy: none
		sourceColumn: source_created_at

		annotation SummarizationSetBy = Automatic

	column fk_dim_order_statuses
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 60b9f4ea-5ffd-47de-8d2a-ea17152d4334
		summarizeBy: none
		sourceColumn: fk_dim_order_statuses

		annotation SummarizationSetBy = Automatic

	/// Foreign key to Dim Billing Agreements based on when the customer made changes to the recipes in the mealbox
	/// if no change was made to the order its based on the generation timestamp of the order.
	/// Used to see the state of the customer when they started modifying their order.
	/// Customer can make changes to their mealbox 4 weeks in advance. If they change their subscription
	/// after making changes it will not update orders that has already been modified by the customer.
	column fk_dim_billing_agreements_subscription
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 70f41c62-2bf4-4d7d-ad49-eb860a3a49c7
		summarizeBy: none
		sourceColumn: fk_dim_billing_agreements_subscription

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_products_subscription
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 9ddcb8e7-5e53-41e2-8d8b-69b02321fe10
		summarizeBy: none
		sourceColumn: fk_dim_products_subscription

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_recipes
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 9779d293-0b93-49e8-a958-cf3094e720a4
		summarizeBy: none
		sourceColumn: fk_dim_recipes

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column fk_dim_recipes_subscription
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: a83a42fe-d628-44f3-a944-434b8c7c3dab
		summarizeBy: none
		sourceColumn: fk_dim_recipes_subscription

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// Is 1 if the ordered dish was added by the customer themselves and 0 if the ordered dish was a part of the preselection the customer was presented to on the frontend. 
	/// For all rows that are not representing a dish the field is null. Is used to determine which type of dishes customers add to their menu.
	column is_added_dish
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: c50d60a1-08bf-4219-a72b-aa0adfe53841
		summarizeBy: sum
		sourceColumn: is_added_dish

		annotation SummarizationSetBy = Automatic

	/// Is 1 if the customer removed the dish presented on the frontend from their menu and and 0 if the dish presented on the frontend was ordered by the customer. 
	/// For all rows that are not representing a dish the field is null. Is used to determine which type of dishes customers remove from their menu.
	column is_removed_dish
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 0bce8e48-e1a3-4ac5-96a2-0a81a4030231
		summarizeBy: sum
		sourceColumn: is_removed_dish

		annotation SummarizationSetBy = Automatic

	/// Is true if the product variation is a dish (i.e., velg & vrak product type) else false.
	column is_dish
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		lineageTag: c0037b56-1a60-4707-a64a-e2906f2b493c
		summarizeBy: none
		sourceColumn: is_dish

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// Is true if the product variation represents a mealbox else false. If there are several mealboxes on the order it will be true of all mealboxes.
	column is_mealbox
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: is_mealbox

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// Is true if the preselected product variation represents a dish, else false.
	column is_preselected_dish
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: is_preselected_dish

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// Is true if the ordered product variation is a grocery
	column is_grocery
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: is_grocery

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// The unique identifier representing a recipe id. Both dishes and groceries can have recipes.
	column recipe_id
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 0704f8ef-3920-4380-a45a-e07118aaa5c8
		summarizeBy: sum
		sourceColumn: recipe_id

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// The difference between the number of meals ordered by the customer and the number of meals they subscribe to. The differnece is on the mealbox row of the order.
	column meal_adjustment_subscription
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 9de2f151-76bb-4299-b656-b162975c6d4e
		summarizeBy: sum
		sourceColumn: meal_adjustment_subscription

		changedProperty = IsHidden

	/// The difference between the number of portions ordered by the customer and the number of portions they subscribe to. 
	/// The customer can change portions on dish level, hence is the number placed on the recipe row of the order.
	column portion_adjustment_subscription
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 016251e9-4b56-4c8e-9bd0-a5612a033a5a
		summarizeBy: sum
		sourceColumn: portion_adjustment_subscription

		changedProperty = IsHidden

	/// Free text comment made by a customer when rating the recipe.
	column 'Recipe Comment'
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 3e5ae9e1-2917-43f6-a9b1-0bda05b14b98
		summarizeBy: none
		sourceColumn: recipe_comment

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// The 1-5 rating converted to a 0-100 score.
	column 'Recipe Rating Score'
		dataType: double
		isHidden
		isAvailableInMdx: false
		lineageTag: 8be3dd03-a69f-419c-bb59-ea6bd2fc7f00
		summarizeBy: sum
		sourceColumn: recipe_rating_score

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}
	
	/// Rating (1-5) of the recipe given by the customer. If rating is 0 it means that the customer marked the recipe as not cooked.
	column 'Recipe Rating'
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 4b855194-f28b-40f4-90b2-fbdafafefef9
		summarizeBy: sum
		sourceColumn: recipe_rating

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// The customer has selected that they have not cooked the dish (rating = 0).
	column is_not_cooked_dish
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		lineageTag: 4cdc576b-33b0-4f99-b498-a8aa9e062ceb
		summarizeBy: none
		sourceColumn: is_not_cooked_dish

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	/// Flag that indicates if the customer was presented for output of the preselector in the frontend before selecting recipes. 
	/// Due to bugs it can happen that a customer does not see any preselected dishes in their menu on the frontend. 
	/// When this happens the customer will often just go ahead and select dishes themselves. 
	/// If the customer was not presented with preselector output in the frontend the value of the flag is 1, 
	/// if the customer did receive preselector output before selecting dishes its 0. 
	/// The value is null for orders that existed before the preselector was launched together with Onesub (pre fall of 2024). 
	/// The flag is on order level. I.e. the whole order will have the same value for this flag.
	column is_missing_preselector_output
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: is_missing_preselector_output

	/// True if the customer replaced the dishes in the menu presented to them on the frontend with other dishes, else false.
	///
	/// The order is not considered to have a swap if any of these are true, and the field will be false.
	/// - The customer did not make any changes to the dishes on their order, and sticked with what was presented to them on the webpage.
	/// - The customer only removed/added dishes without adding/removing another dish
	/// - The customer did not get any preselected menu on the frontend, and was forced to chose dishes themselves (see is_missing_preselector-column)
	///
	/// The field is null for orders created before we started tracking subscribed products (<2024).
	column has_swap
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		summarizeBy: none
		sourceColumn: has_swap

	column fk_dim_portions
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_portions
	
	/// Defines a unique recipe rating. To be used to count number of ratings. A concatenation of the billing_agreement_id and the recipe_id from the recipe ratings table.
	/// Used in Menu Measures
	column 'Recipe Rating Id'
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: 68b906db-5f2b-4ce4-88ce-8349a1e8c941
		summarizeBy: none
		sourceColumn: recipe_rating_id
	
	/// Defines a unique recipe comment. To be used to count number of comments. A concatenation of the billing_agreement_id and the recipe_id from the recipe comments table.
	/// Used in Menu Measures
	column 'Recipe Comment Id'
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: c29fb2c0-31e8-4a5c-b565-96353d19f182
		summarizeBy: none
		sourceColumn: recipe_comment_id

	column 'fk_dim_periods_since_first_menu_week'
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_periods_since_first_menu_week

	/// 1 if the order line represents a thrifty dish
	column is_thrifty_dish
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: is_thrifty_dish

	/// 1 if the order line represents a plus price dish
	column is_plus_price_dish
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: is_plus_price_dish

	/// The number of meals of the product variation
	column meals
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: meals

	/// The number of portions of the product variation
	column portions
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: portions

	/// The total number of servings in the mealbox which is calculated by taking meals * portions * product quantity. The value is null for all product variations that are not represention a mealbox.
	column mealbox_servings
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: mealbox_servings

	/// The total number of servings in the subscribed mealbox which is calculated by taking meals * portions * subscribed product quantity. The value is null for all product variations that are not represention a mealbox.
	column mealbox_servings_subscription
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: mealbox_servings_subscription

	/// The number of servings on the dish, which is calculated by taking dish quantity * portions. The value is null for rows that is not a dish in the order (is_dish = true).
	column dish_servings
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: dish_servings

	/// The number of servings in the preselected dish, which is calculated by taking subscribed quantity * portions. The value is null for rows that is not a preselected dish.
	column dish_servings_subscription
		dataType: int64
		isHidden
		formatString: 0
		summarizeBy: none
		sourceColumn: dish_servings_subscription

	column fk_dim_preference_combinations
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_preference_combinations

	column fk_dim_order_line_details
    	dataType: string
    	isHidden
    	isAvailableInMdx: false
    	summarizeBy: none
    	sourceColumn: fk_dim_order_line_details

	/// True if the preselected product variation represents a grocery the customer subscribes to, else false. 
	/// Is null for all orders that was placed before we started tracking subscribed products (< 2024).
	column is_subscribed_grocery
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: is_subscribed_grocery

	/// Quantity subscribed to of the product.
	column product_variation_quantity_subscription
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		summarizeBy: sum
		sourceColumn: product_variation_quantity_subscription
	
	/// The total amount of the order line if only including subscribed product variation quantity. 
	/// E.g. if a customer subscribed to one milk and adds two more. This column will only contain the amount coming from one milk.
	column total_amount_ex_vat_subscription
		dataType: double
		isHidden
		isAvailableInMdx: false
		summarizeBy: sum
		sourceColumn: total_amount_ex_vat_subscription

	column fk_dim_loyalty_seasons
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_loyalty_seasons

	column fk_dim_discounts
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_discounts

	column fk_dim_customer_journey_segments
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_customer_journey_segments

	/// True if the order status is one finished or processed.
	/// The flag is used in measures only include the orders of interest.
	column has_finished_order_status
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: has_finished_order_status
	
	/// True if the order is a subscription order, campaign order or daily direct order.
	/// The flag is used in measures only include the orders of interest. E.g., excluding gift cards and similar.
	column has_normal_order_type
		dataType: boolean
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: has_normal_order_type

	/// The net weight (in grams) for the total ingredient amount in the recipe.
	column total_ingredient_weight
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight

		annotation SummarizationSetBy = Automatic

	/// The net weight (in grams) of the ingredients, based on ingredient quantity in whole units.
	column total_ingredient_weight_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_whole_units

		annotation SummarizationSetBy = Automatic

	/// The menu planning purchasing cost for the total ingredient amount in the recipe.
	column total_ingredient_planned_cost
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_planned_cost

		annotation SummarizationSetBy = Automatic

	/// The menu planning purchasing cost based on ingredient quantity in whole units. 
	/// It is calculated as the sum of the cost of the recipe ingredients based on the quantity used in the recipe rounded up to the nearest integer. 
	column total_ingredient_planned_cost_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_planned_cost_whole_units

		annotation SummarizationSetBy = Automatic

	/// The expected purchasing cost for the total ingredient amount in the recipe. 
	/// The expected cost includes discounts or other price adjustment (variable cost unit) if set, as opposed to the planned cost that does not take the variable cost into account.
	column total_ingredient_expected_cost
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_expected_cost

		annotation SummarizationSetBy = Automatic

	/// The expected purchasing cost based on ingredient quantity in whole units. 
	/// The expected cost includes discounts or other price adjustment (variable cost unit) if set, as opposed to the planned cost that does not take the variable cost into account. 
	/// This field is calculated as the sum of the expected cost of the recipe ingredients based on the quantity used in the recipe rounded up to the nearest integer.
	column total_ingredient_expected_cost_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_expected_cost_whole_units

		annotation SummarizationSetBy = Automatic

	/// The actual purchasing cost for the total ingredient amount of the recipe. 
	/// It is fetched from the purchasing order(s) for the menu week of the recipe and calculated as the actual purchasing cost of the orders, divided by the quantity in the orders, multiplied with the ingredient quantity in the recipe.
	column total_ingredient_actual_cost
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_actual_cost

		annotation SummarizationSetBy = Automatic

	/// The actual purchasing cost for the total ingredient amount of the recipe. 
	/// It is fetched from the purchasing order(s) for the menu week of the recipe and calculated by dividing the actual purchasing cost of the orders by the ordered quantity, and then multipling it with the ingredient quantity (rounded up to whole units) in the recipe.
	column total_ingredient_actual_cost_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_actual_cost_whole_units

		annotation SummarizationSetBy = Automatic

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data. For meaningful analysis, use this field together with total_ingredient_weight_with_co2_data to calculate emissions per kg of food in the recipes.
	column total_ingredient_co2_emissions
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_co2_emissions

		annotation SummarizationSetBy = Automatic

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity (rounded up to whole units) of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data. For meaningful analysis, use this field together with total_ingredient_weight_with_co2_data_whole_units to calculate emissions per kg of food in the recipes.
	column total_ingredient_co2_emissions_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_co2_emissions_whole_units

		annotation SummarizationSetBy = Automatic

	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data.
	column total_ingredient_weight_with_co2_data
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_with_co2_data

		annotation SummarizationSetBy = Automatic

	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data, where the quantity of the ingredients is rounded up to whole units.
	column total_ingredient_weight_with_co2_data_whole_units
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_with_co2_data_whole_units

		annotation SummarizationSetBy = Automatic
	
	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The net weight (in grams) for the total ingredient amount in the recipe.
	column total_ingredient_weight_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The net weight (in grams) of the ingredients, based on ingredient quantity in whole units.
	column total_ingredient_weight_whole_units_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_whole_units_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The menu planning purchasing cost for the total ingredient amount in the recipe.
	column total_ingredient_planned_cost_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_planned_cost_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The menu planning purchasing cost based on ingredient quantity in whole units. 
	/// It is calculated as the sum of the cost of the recipe ingredients based on the quantity used in the recipe rounded up to the nearest integer. 
	column total_ingredient_planned_cost_whole_units_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_planned_cost_whole_units_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The expected purchasing cost for the total ingredient amount in the recipe. 
	/// The expected cost includes discounts or other price adjustment (variable cost unit) if set, as opposed to the planned cost that does not take the variable cost into account.
	column total_ingredient_expected_cost_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_expected_cost_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The expected purchasing cost based on ingredient quantity in whole units. 
	/// The expected cost includes discounts or other price adjustment (variable cost unit) if set, as opposed to the planned cost that does not take the variable cost into account. 
	/// This field is calculated as the sum of the expected cost of the recipe ingredients based on the quantity used in the recipe rounded up to the nearest integer.
	column total_ingredient_expected_cost_whole_units_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_expected_cost_whole_units_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The actual purchasing cost for the total ingredient amount of the recipe. 
	/// It is fetched from the purchasing order(s) for the menu week of the recipe and calculated as the actual purchasing cost of the orders, divided by the quantity in the orders, multiplied with the ingredient quantity in the recipe.
	column total_ingredient_actual_cost_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_actual_cost_subscription

		annotation SummarizationSetBy = Automatic

	/// The actual purchasing cost for the total ingredient amount of the recipe. 
	/// It is fetched from the purchasing order(s) for the menu week of the recipe and calculated by dividing the actual purchasing cost of the orders by the ordered quantity, and then multipling it with the ingredient quantity (rounded up to whole units) in the recipe.
	column total_ingredient_actual_cost_whole_units_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_actual_cost_whole_units_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data. For meaningful analysis, use this field together with total_ingredient_weight_with_co2_data to calculate emissions per kg of food in the recipes.
	column total_ingredient_co2_emissions_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_co2_emissions_subscription

		annotation SummarizationSetBy = Automatic

	/// The total amount of registered co2 emissions (in kg) for the ingredients in the recipes. 
	/// It is calculated by multipling the emission per kg of the ingredient with the net weight of on unit of the ingredient, and then multipling it with the quantity (rounded up to whole units) of the ingredient in the recipe. 
	/// Note: Not all ingredients have registered CO2 emission data. For meaningful analysis, use this field together with total_ingredient_weight_with_co2_data_whole_units to calculate emissions per kg of food in the recipes.
	column total_ingredient_co2_emissions_whole_units_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_co2_emissions_whole_units_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data.
	column total_ingredient_weight_with_co2_data_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_with_co2_data_subscription

		annotation SummarizationSetBy = Automatic

	/// Ingredient data for the recipes shown to the customer on the frontend (preselected dishes).
	/// I.e. the recipes the customer would get if not making changes to the mealbox.
	/// The total net weight (in grams) of ingredients in the recipe that have registered CO2 emission data, where the quantity of the ingredients is rounded up to whole units.
	column total_ingredient_weight_with_co2_data_whole_units_subscription
		dataType: double
		isHidden
        isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: total_ingredient_weight_with_co2_data_whole_units_subscription

		annotation SummarizationSetBy = Automatic

    column fk_dim_transportation
        dataType: string
        isHidden
        isAvailableInMdx: false
        summarizeBy: none
        sourceColumn: fk_dim_transportation

	column pk_fact_orders
		dataType: string
		isHidden
		isAvailableInMdx: false
		lineageTag: a0616f12-e53a-4cd8-93a8-0c03b169a149
		summarizeBy: none
		sourceColumn: pk_fact_orders

	/// TO-DO: 
	/// Remove when dim_partnerships is connected to relevant fact tables in a similar way as it is done for dim_preferences. 
	column fk_dim_partnerships
		dataType: string
		isHidden
		isAvailableInMdx: false
		summarizeBy: none
		sourceColumn: fk_dim_partnerships

	/// Primary key of the dim_ingredient_combinations table
    column fk_dim_ingredient_combinations
        dataType: string
        isHidden
        isAvailableInMdx: false
        summarizeBy: none
        sourceColumn: fk_dim_ingredient_combinations

	/// Primary key of the dim_price_categories
    column fk_dim_price_categories
        dataType: string
        isHidden
        isAvailableInMdx: false
        summarizeBy: none
        sourceColumn: fk_dim_price_categories

	partition 'Order Measures' = m
		mode: directQuery
		source =
				let
				    Source = Databricks.Catalogs(Host, HttpPath, [Catalog=null, Database=null, EnableAutomaticProxyDiscovery=null]),
				    catalog_Database = Source{[Name=Catalog,Kind="Database"]}[Data],
				    gold_Schema = catalog_Database{[Name=Schema,Kind="Schema"]}[Data],
				    fact_orders_Table = gold_Schema{[Name="fact_orders",Kind="Table"]}[Data],
				    #"Filtered Rows" = Table.SelectRows(fact_orders_Table, each [source_created_at] >= RangeStart and [source_created_at] < RangeEnd)
				in
				    #"Filtered Rows"

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation