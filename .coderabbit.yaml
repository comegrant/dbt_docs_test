# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: en-US
tone_instructions: |
  Expert code reviewer for Python, SQL, YAML, Terraform, and TMDL. Provide concise, clear advice following modern data stack principles.
  Tech: Databricks, dbt, Power BI, Terraform, Azure. Expertise in data engineering, modeling, and ML.
early_access: false
enable_free_tier: true
reviews:
  profile: chill
  request_changes_workflow: false
  high_level_summary: true
  high_level_summary_placeholder: '@coderabbitai summary'
  high_level_summary_in_walkthrough: true
  auto_title_placeholder: '@coderabbitai'
  auto_title_instructions: ''
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: true
  changed_files_summary: true
  sequence_diagrams: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: false
  auto_apply_labels: false
  suggested_reviewers: true
  poem: false
  labeling_instructions: []
  path_filters:
    - "!**/*.Report/**"
    - "!**/*.pbip"
  path_instructions:
    - path: "**/*.py"
      instructions: |
        - Follow PEP 8 standards and pass ruff linting checks
        - Include proper type hints and comprehensive docstrings
        - Implement error handling and logging
        - Maintain good test coverage
        - Follow project-specific standards in README.md files

    - path: "**/*.sql"
      instructions: |
        - Follow best practices for SQL code
        - Use snake_case for all names
        - Follow naming conventions: date columns as <event>_date, timestamps as <event>_at, booleans with is_/has_ prefix, IDs as <table_name>_id
        - Use consistent formatting with proper indentation and leading commas
        - Use CTEs for each transformation steps with descriptive names
        - Only use SQL functions compatible with both dbt and Databricks SQL

    - path: "projects/data-model/**"
      instructions: |
        - Follow best practices for data modelling in dbt (data build tool)

    - path: "projects/data-model/transform/models/silver/**/*.sql"
      instructions: |
        - Only perform: renaming, type casting, basic computations, consistent casing, column removal
        - Do NOT include joins, unions, or aggregations (with rare exceptions)
        - Follow naming convention: <source_system>__<source_table_name>(s).sql

    - path: "projects/data-model/transform/models/intermediate/**/*.sql"
      instructions: |
        - Files should be used to isolate concepts and calculations for reuse
        - Can include: joins of silver tables, advanced calculations, pivots, filters
        - Follow naming convention: int_<silver_model_reference>_<actions>s.sql

    - path: "projects/data-model/transform/models/gold/**/*.sql"
      instructions: |
        - Create dimensional data models with fact/dimension tables
        - Add primary and foreign keys
        - Do NOT join with other facts (move such logic to intermediate)
        - Follow naming conventions with dim_/fact_ prefixes

    - path: "projects/data-model/transform/models/mlgold/**/*.sql"
      instructions: |
        - Build on top of gold and intermediate models for ML-specific transformations
        - Document ML-specific logic and calculations

    - path: "projects/data-model/transform/macros/**/*.sql"
      instructions: |
        - Use snake_case for macro names
        - Include docstrings explaining purpose, parameters, return values, and usage
        - Follow modular design with proper error handling
        - Test thoroughly and maintain backward compatibility

    - path: "projects/data-model/ingest/**/*.py"
      instructions: |
        - Follow best practice for data ingestion in Python

    - path: "projects/powerbi/**"
      instructions: |
        - Follow Power BI best practices for semantic models and reports
        - Ensure proper naming conventions and relationships
        - Verify measures follow DAX best practices

    - path: "**/tests/**/*.py"
      instructions: |
        - Write comprehensive, isolated, and deterministic tests
        - Include appropriate assertions, fixtures, and mocks
        - Use descriptive test names

    - path: "terraform/**"
      instructions: |
        - Follow infrastructure-as-code best practices
        - Use proper formatting and documentation

    - path: ".github/**"
      instructions: |
        - Follow CI/CD best practices

  abort_on_close: true
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: ["wip", "skip-review", "skip"]
    labels: []
    drafts: false
    base_branches: []
  finishing_touches:
    docstrings:
      enabled: true
chat:
  auto_reply: true
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  learnings:
    scope: local
  pull_requests:
    scope: local
code_generation:
  docstrings:
    language: en-US
