---
name: CI projects/terraform

on:
  pull_request:
    paths:
      - '.github/workflows/ci_terraform.yml'
      - 'terraform**'
  workflow_dispatch:  # Allows to trigger the workflow manually in GitHub UI

permissions:
  security-events: write
  contents: read
  actions: read
  id-token: write

jobs:
  terraform-unit-tests:
    name: 'Terraform Unit Tests'
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ./terraform/deployment

    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps: 
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure Azure credentials
      uses: azure/login@v1.4.7
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backend.conf
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Setup TFLint for validating terraform
    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: v0.50.3

    # Initialize TFLint
    - name: Init TFLint
      run: tflint --init

    # Runt TFLint
    - name: Run TFLint
      run: tflint --recursive

    # Run tfsec
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0


  deploy-to-development:
    name: 'Deploy to Development'
    needs: terraform-unit-tests
    strategy:
      matrix: 
        target: [Development]
      max-parallel: 1
      fail-fast: true
    uses: ./.github/workflows/cd_terraform_template.yml
    with:
      target-env: ${{matrix.target}}
    secrets: inherit