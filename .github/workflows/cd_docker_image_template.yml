name: 'Build and Push Docker image'

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "The project directory to deploy. Should contain a databricks.yml file in the root"

      dockerfile:
        required: true
        type: string
        default: ${{ inputs.working-directory }}/Dockerfile

      image-name:
        required: true
        type: string

      tag:
        type: string
        default: ${{ github.sha }}

      push-latest:
        type: boolean
        default: false

      registry:
        required: true
        type: string

  workflow_dispatch:  # Allows to trigger the workflow manually in GitHub UI

jobs:
  build-docker-image:
    name: 'Build and Push Docker image'
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: 'ACR authentication'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ inputs.registry }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ inputs.working-directory }}-${{ inputs.dockerfile }}-test

    - name: Build and Push to ACR
      if: ${{ inputs.push-latest == false }}
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.tag }}
        file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache


    - name: Build and Push to ACR
      if: ${{ inputs.push-latest == true }}
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.tag }}, ${{ inputs.registry }}/${{ inputs.image-name }}:latest
        file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        cache-from: type=registry,ref=${{ inputs.registry }}/${{ inputs.image-name }}
        cache-to: type=registry,ref=${{ inputs.registry }}/${{ inputs.image-name }},mode=max
