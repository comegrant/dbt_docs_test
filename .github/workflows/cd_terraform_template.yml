name: 'Deploy Terraform for ...'

on: 
  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
  workflow_dispatch:  # Allows to trigger the workflow manually in GitHub UI

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  #pull-requests: write
  actions: read

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: ${{inputs.target-env}} 
    defaults: 
      run:
        working-directory: ./terraform/deployment
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
      AZURE_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      AZURE_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      AZURE_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ENV: "${{vars.ENVIRONMENT_VARIABLE}}"
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure Azure credentials
      uses: azure/login@v1.4.7
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backend.conf
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform workspace select ${{env.ENV}}
      run: terraform workspace select ${{env.ENV}}
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    - name: Setup Terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        azure_client_id = "${{ env.AZURE_CLIENT_ID }}"
        azure_subscription_id = "${{ env.AZURE_SUBSCRIPTION_ID }}"
        azure_tenant_id = "${{ env.AZURE_TENANT_ID }}"
        EOF

    - name: Terraform plan
      run: terraform plan
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: ${{inputs.target-env}}
    defaults: 
      run:
        working-directory: ./terraform/deployment
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
      AZURE_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      AZURE_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      AZURE_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ENV: "${{vars.ENVIRONMENT_VARIABLE}}"
    needs: [terraform-plan]

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure Azure credentials
      uses: azure/login@v1.4.7
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backend.conf
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    - name: Terraform workspace select ${{env.ENV}}
      run: terraform workspace select ${{env.ENV}}
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}

    - name: Setup Terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        azure_client_id = "${{ env.AZURE_CLIENT_ID }}"
        azure_subscription_id = "${{ env.AZURE_SUBSCRIPTION_ID }}"
        azure_tenant_id = "${{ env.AZURE_TENANT_ID }}"
        EOF

    - name: Terraform apply
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}